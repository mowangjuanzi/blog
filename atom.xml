<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>魔王卷子的博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.baoguoxiao.com/"/>
  <updated>2020-02-08T13:35:52.000Z</updated>
  <id>http://www.baoguoxiao.com/</id>
  
  <author>
    <name>魔王卷子</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>CORS的一点事</title>
    <link href="http://www.baoguoxiao.com/2020/02/08/one-thing-of-cors/"/>
    <id>http://www.baoguoxiao.com/2020/02/08/one-thing-of-cors/</id>
    <published>2020-02-08T13:35:52.000Z</published>
    <updated>2020-02-08T13:35:52.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景介绍"><a href="#背景介绍" class="headerlink" title="背景介绍"></a>背景介绍</h2><p>我们公司有个 <code>m</code> 域名，主要是用来访问前端编译文件。然后有一个 <code>api</code> 域名，用来提供接口请求。我发现我们的接口每次访问都会请求两次。第一次是 <code>OPTION</code> 请求。第二次才是真实的请求。</p><a id="more"></a><h2 id="原因分析"><a href="#原因分析" class="headerlink" title="原因分析"></a>原因分析</h2><p>我对此表示困惑，通过查询相关文档，了解到我们是用的JWT作为我们的token验证方式。然后我们在传递token的时候是将其放到 <code>header</code> 中的 <code>Authorization</code> 中。</p><p>因为不符合CORS简单请求的规则，所以触发了预检请求。</p><p>可通过以下两个规则来查看简单请求和预检请求的区别：</p><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Access_control_CORS#简单请求" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Access_control_CORS#简单请求</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Access_control_CORS#预检请求" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Access_control_CORS#预检请求</a></li></ul><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>通过查询<a href="https://jwt-auth.readthedocs.io/en/develop/quick-start/#authenticated-requests" target="_blank" rel="noopener">JWT-AUTH的文档</a>可以知道解决方案很简单。</p><p>将<code>Authorization header</code>请求更改为<code>Query string parameter</code>请求即可。</p><h2 id="更多"><a href="#更多" class="headerlink" title="更多"></a>更多</h2><p>CORS 配置，我们是在PHP这一层实现的。我觉得还是在nginx 实现比较好。 下面是我按照网上写好的格式copy的。等上班了去实际环境测试先。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">set</span> <span class="variable">$allow_origin</span> <span class="string">""</span>;</span><br><span class="line">    <span class="attribute">if</span> ( <span class="variable">$http_origin</span> <span class="regexp">~ '^https?://m(.(dev|test))?.example.com'</span> ) &#123;</span><br><span class="line">        <span class="attribute">set</span> <span class="variable">$allow_origin</span> <span class="variable">$http_origin</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="attribute">add_header</span> <span class="string">'Access-Control-Allow-Origin'</span> <span class="variable">$allow_origin</span>;</span><br><span class="line">        <span class="attribute">add_header</span> <span class="string">'Access-Control-Allow-Credentials'</span> <span class="string">'true'</span>;</span><br><span class="line">        <span class="attribute">add_header</span> <span class="string">'Access-Control-Allow-Methods'</span> <span class="string">'GET,POST,OPTIONS'</span>;</span><br><span class="line">        <span class="attribute">add_header</span> <span class="string">'Access-Control-Allow-Headers'</span> <span class="string">'Token,DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,X_Requested_With,If-Modified-Since,Cache-Control,Content-Type'</span>;</span><br><span class="line">        <span class="attribute">add_header</span> <span class="string">'Access-Control-Max-Age'</span> <span class="string">'1728000'</span>;</span><br><span class="line">        <span class="attribute">if</span> (<span class="variable">$request_method</span> = <span class="string">'OPTIONS'</span>) &#123;</span><br><span class="line">            <span class="attribute">return</span> <span class="number">204</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="相关连接"><a href="#相关连接" class="headerlink" title="相关连接"></a>相关连接</h2><ul><li><a href="https://jwt-auth.readthedocs.io/en/develop/quick-start/" target="_blank" rel="noopener">https://jwt-auth.readthedocs.io/en/develop/quick-start/</a></li><li><a href="https://www.ruanyifeng.com/blog/2016/04/cors.html" target="_blank" rel="noopener">https://www.ruanyifeng.com/blog/2016/04/cors.html</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Access_control_CORS" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Access_control_CORS</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;背景介绍&quot;&gt;&lt;a href=&quot;#背景介绍&quot; class=&quot;headerlink&quot; title=&quot;背景介绍&quot;&gt;&lt;/a&gt;背景介绍&lt;/h2&gt;&lt;p&gt;我们公司有个 &lt;code&gt;m&lt;/code&gt; 域名，主要是用来访问前端编译文件。然后有一个 &lt;code&gt;api&lt;/code&gt; 域名，用来提供接口请求。我发现我们的接口每次访问都会请求两次。第一次是 &lt;code&gt;OPTION&lt;/code&gt; 请求。第二次才是真实的请求。&lt;/p&gt;
    
    </summary>
    
    
      <category term="http" scheme="http://www.baoguoxiao.com/categories/http/"/>
    
    
      <category term="http" scheme="http://www.baoguoxiao.com/tags/http/"/>
    
      <category term="cors" scheme="http://www.baoguoxiao.com/tags/cors/"/>
    
  </entry>
  
  <entry>
    <title>控制 nginx【译】</title>
    <link href="http://www.baoguoxiao.com/2019/12/29/control-nginx/"/>
    <id>http://www.baoguoxiao.com/2019/12/29/control-nginx/</id>
    <published>2019-12-29T01:00:00.000Z</published>
    <updated>2019-12-29T13:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>原文地址：<a href="http://nginx.org/en/docs/control.html" target="_blank" rel="noopener">Controlling nginx</a></p></blockquote><p>nginx 可以用信号来控制. 默认 master 进程的进程 ID 写入到 <code>/usr/local/nginx/logs/nginx.pid</code> 文件. 这个文件名称可以在配置时更改, 或者在 <code>nginx.conf</code> 使用 <a href="http://nginx.org/en/docs/ngx_core_module.html#pid" target="_blank" rel="noopener">pid</a> 指令更改. master 进程支持以下信号:</p><a id="more"></a><table><thead><tr><th align="center">信号</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">TERM, INT</td><td align="center">快速关闭</td></tr><tr><td align="center">QUIT</td><td align="center">平滑关闭</td></tr><tr><td align="center">HUP</td><td align="center">更改配置, 保持已改变的时区 (仅限于 FreeBSD 和 Linux), 使用新配置启动新的 worker 进程, 合理的关闭旧的 worker 进程</td></tr><tr><td align="center">USR1</td><td align="center">重新打开日志文件</td></tr><tr><td align="center">USR2</td><td align="center">升级可执行文件</td></tr><tr><td align="center">WINCH</td><td align="center">平滑关闭 worker 进程</td></tr></tbody></table><p>个别 worker 进程也可以用信号来控制, 尽管这不是必须的. 支持的信号有:</p><table><thead><tr><th align="center">信号</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">TERM, INT</td><td align="center">快速关闭</td></tr><tr><td align="center">QUIT</td><td align="center">平滑关闭</td></tr><tr><td align="center">USR1</td><td align="center">重新打开日志文件</td></tr><tr><td align="center">WINCH</td><td align="center">调试异常终止 (需要启用 <a href="http://nginx.org/en/docs/ngx_core_module.html#debug_points" target="_blank" rel="noopener">debug_points</a> )</td></tr></tbody></table><p><a name="971bdd34"></a></p><h2 id="改变配置文件"><a href="#改变配置文件" class="headerlink" title="改变配置文件"></a>改变配置文件</h2><p>为了让 nginx 重新读取配置文件, 应将 <code>HUP</code> 信号发送到 master 进程. master 进程首先检查语法的有效性, 然后尝试应用新配置, 即打开日志文件和新的 listen 套接字. 如果失败, 将回滚更改并继续使用旧配置. 如果成功, 它开始新的 worker 进程, 并发消息到旧的 worker 进程, 要求它们正常关闭. 旧的 worker 进程关闭 listen 套接字和继续服务老的客户端. 为所有的客户端提供服务后, 旧的 worker 进程将会关闭.</p><p>让我们举例说明. 想象一下 nginx 在 FreeBSD 上运行，并且执行命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps axw -o pid,ppid,user,%cpu,vsz,wchan,<span class="built_in">command</span> | egrep <span class="string">'(nginx|PID)'</span></span><br></pre></td></tr></table></figure><p>生成以下输出:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">PID  PPID USER    %CPU   VSZ WCHAN  COMMAND</span><br><span class="line">33126     1 root     0.0  1148 pause  nginx: master process /usr/<span class="built_in">local</span>/nginx/sbin/nginx</span><br><span class="line">33127 33126 nobody   0.0  1380 kqread nginx: worker process (nginx)</span><br><span class="line">33128 33126 nobody   0.0  1364 kqread nginx: worker process (nginx)</span><br><span class="line">33129 33126 nobody   0.0  1364 kqread nginx: worker process (nginx)</span><br></pre></td></tr></table></figure><p>如果 <code>HUP</code> 发送到 master 进程, 输出则变为:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">PID  PPID USER    %CPU   VSZ WCHAN  COMMAND</span><br><span class="line">33126     1 root     0.0  1164 pause  nginx: master process /usr/<span class="built_in">local</span>/nginx/sbin/nginx</span><br><span class="line">33129 33126 nobody   0.0  1380 kqread nginx: worker process is shutting down (nginx)</span><br><span class="line">33134 33126 nobody   0.0  1368 kqread nginx: worker process (nginx)</span><br><span class="line">33135 33126 nobody   0.0  1368 kqread nginx: worker process (nginx)</span><br><span class="line">33136 33126 nobody   0.0  1368 kqread nginx: worker process (nginx)</span><br></pre></td></tr></table></figure><p>一个 PID 为 33129 的 worker 进程仍然可以继续工作. 一段时间后, 它将会退出:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">PID  PPID USER    %CPU   VSZ WCHAN  COMMAND</span><br><span class="line">33126     1 root     0.0  1164 pause  nginx: master process /usr/<span class="built_in">local</span>/nginx/sbin/nginx</span><br><span class="line">33134 33126 nobody   0.0  1368 kqread nginx: worker process (nginx)</span><br><span class="line">33135 33126 nobody   0.0  1368 kqread nginx: worker process (nginx)</span><br><span class="line">33136 33126 nobody   0.0  1368 kqread nginx: worker process (nginx)</span><br></pre></td></tr></table></figure><p><a name="6bd59ffc"></a></p><h2 id="切换日志文件"><a href="#切换日志文件" class="headerlink" title="切换日志文件"></a>切换日志文件</h2><p>为了切换日志文件, 首先需要将其重命名. 之后,  <code>USR1</code> 信号应发送到 master 进程. master 进程将重新打开所有当前打开的日志文件, 并将这些文件分配给非特权用户, 该用户作为所有者运行工作进程. 成功重新打开后, master 进程将关闭所有打开的文件并发送消息给 worker 进程, 要求它们重新打开文件. worker 进程会立即重新打开新文件并关闭旧文件. 最后, 旧的日志文件几乎可以立即用于压缩等后期处理.</p><p><a name="5d87d4bd"></a></p><h2 id="云升级可执行文件"><a href="#云升级可执行文件" class="headerlink" title="云升级可执行文件"></a>云升级可执行文件</h2><p>为了升级服务器的可执行文件, 新的可执行文件应该首先取代旧的文件. 然后发送 <code>USR2</code> 信号到 master 进程. master 进程首先用进程 ID 将文件重命名为后缀名是 <code>.oldbin</code> 的新文件, 例如 <code>/usr/local/nginx/logs/nginx.pid.oldbin</code>, 然后启动一个新的可执行文件, 该文件又启动新的 worker 进程:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">PID  PPID USER    %CPU   VSZ WCHAN  COMMAND</span><br><span class="line">33126     1 root     0.0  1164 pause  nginx: master process /usr/<span class="built_in">local</span>/nginx/sbin/nginx</span><br><span class="line">33134 33126 nobody   0.0  1368 kqread nginx: worker process (nginx)</span><br><span class="line">33135 33126 nobody   0.0  1380 kqread nginx: worker process (nginx)</span><br><span class="line">33136 33126 nobody   0.0  1368 kqread nginx: worker process (nginx)</span><br><span class="line">36264 33126 root     0.0  1148 pause  nginx: master process /usr/<span class="built_in">local</span>/nginx/sbin/nginx</span><br><span class="line">36265 36264 nobody   0.0  1364 kqread nginx: worker process (nginx)</span><br><span class="line">36266 36264 nobody   0.0  1364 kqread nginx: worker process (nginx)</span><br><span class="line">36267 36264 nobody   0.0  1364 kqread nginx: worker process (nginx)</span><br></pre></td></tr></table></figure><p>之后所有的 worker 进程 (旧的和新的) 继续接受请求. 如果 <code>WINCH</code> 信号发送到第一个 master 进程, 它将会向其 worker 进程发送消息, 请求它们优雅的关闭, 然后他们开始退出:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">PID  PPID USER    %CPU   VSZ WCHAN  COMMAND</span><br><span class="line">33126     1 root     0.0  1164 pause  nginx: master process /usr/<span class="built_in">local</span>/nginx/sbin/nginx</span><br><span class="line">33135 33126 nobody   0.0  1380 kqread nginx: worker process is shutting down (nginx)</span><br><span class="line">36264 33126 root     0.0  1148 pause  nginx: master process /usr/<span class="built_in">local</span>/nginx/sbin/nginx</span><br><span class="line">36265 36264 nobody   0.0  1364 kqread nginx: worker process (nginx)</span><br><span class="line">36266 36264 nobody   0.0  1364 kqread nginx: worker process (nginx)</span><br><span class="line">36267 36264 nobody   0.0  1364 kqread nginx: worker process (nginx)</span><br></pre></td></tr></table></figure><p>一段时间后, 只有新的 worker 进程将会处理请求:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">PID  PPID USER    %CPU   VSZ WCHAN  COMMAND</span><br><span class="line">33126     1 root     0.0  1164 pause  nginx: master process /usr/<span class="built_in">local</span>/nginx/sbin/nginx</span><br><span class="line">36264 33126 root     0.0  1148 pause  nginx: master process /usr/<span class="built_in">local</span>/nginx/sbin/nginx</span><br><span class="line">36265 36264 nobody   0.0  1364 kqread nginx: worker process (nginx)</span><br><span class="line">36266 36264 nobody   0.0  1364 kqread nginx: worker process (nginx)</span><br><span class="line">36267 36264 nobody   0.0  1364 kqread nginx: worker process (nginx)</span><br></pre></td></tr></table></figure><p>需要注意的是, 旧的 master 进程没有关闭它的 listen 套接字, 如果需要, 它会重新启动它的 worker 进程. 如果由于某种原因, 新的可执行文件 工作不能接受, 可以选择下面之一进行操作:</p><ul><li>发送 <code>HUP</code> 信号给旧的 master 进行. 旧的 master 进程将会启动新的 worker 进程而无需重新读取配置. 然后, 发送 <code>QUIT</code> 信号到新的 master 进程, 可以优雅的关闭所有的新进程.</li><li>向新 master 进程发送 <code>TERM</code>. 它将向 worker 进程发送一条消息, 请求它们立即退出, 随即他们将会全部退出. (如果新的进程因为某种原因不能退出, <code>KILL</code> 将会发送给它们并强制退出.) 当新的 master 进程退出时, 旧的 master 进程将会自动启动新的 worker 进程.</li></ul><p>如果新的 master 进程退出然后旧的 master 进程会从带有进程 ID 的文件名中丢弃 <code>.oldbin</code> 后缀.</p><p>如果升级成功, 然后 <code>QUIT</code> 信号则发送到旧的 master 进程, 只有新的进程将会保留:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">PID  PPID USER    %CPU   VSZ WCHAN  COMMAND</span><br><span class="line">36264     1 root     0.0  1148 pause  nginx: master process /usr/<span class="built_in">local</span>/nginx/sbin/nginx</span><br><span class="line">36265 36264 nobody   0.0  1364 kqread nginx: worker process (nginx)</span><br><span class="line">36266 36264 nobody   0.0  1364 kqread nginx: worker process (nginx)</span><br><span class="line">36267 36264 nobody   0.0  1364 kqread nginx: worker process (nginx)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;原文地址：&lt;a href=&quot;http://nginx.org/en/docs/control.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Controlling nginx&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;nginx 可以用信号来控制. 默认 master 进程的进程 ID 写入到 &lt;code&gt;/usr/local/nginx/logs/nginx.pid&lt;/code&gt; 文件. 这个文件名称可以在配置时更改, 或者在 &lt;code&gt;nginx.conf&lt;/code&gt; 使用 &lt;a href=&quot;http://nginx.org/en/docs/ngx_core_module.html#pid&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;pid&lt;/a&gt; 指令更改. master 进程支持以下信号:&lt;/p&gt;
    
    </summary>
    
    
      <category term="web服务器" scheme="http://www.baoguoxiao.com/categories/web%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
      <category term="nginx" scheme="http://www.baoguoxiao.com/categories/web%E6%9C%8D%E5%8A%A1%E5%99%A8/nginx/"/>
    
    
      <category term="nginx" scheme="http://www.baoguoxiao.com/tags/nginx/"/>
    
      <category term="信号" scheme="http://www.baoguoxiao.com/tags/%E4%BF%A1%E5%8F%B7/"/>
    
  </entry>
  
  <entry>
    <title>PHP之内置web服务器</title>
    <link href="http://www.baoguoxiao.com/2019/05/18/php-built-in-web-server/"/>
    <id>http://www.baoguoxiao.com/2019/05/18/php-built-in-web-server/</id>
    <published>2019-05-18T08:20:49.000Z</published>
    <updated>2019-05-18T08:20:49.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>PHP从5.4开始，就提供了一个内置的web服务器。</p><p>这个主要是用来做本地的开发用的。不能用于线上环境。现在我就介绍一下这个工具如何使用。</p><a id="more"></a><h2 id="基础应用"><a href="#基础应用" class="headerlink" title="基础应用"></a>基础应用</h2><p>首先我们假定项目目录是<code>/home/baoguoxiao/www/php/demo</code>，外界可访问的目录是<code>/home/baoguoxiao/www/php/demo/public</code>。然后访问的端口是<code>8000</code>，入口文件是<code>index.php</code>和<code>index.html</code>。那么我们可以执行如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /home/baoguoxiao/www/php/demo/public</span><br><span class="line">php -S localhost:8000</span><br></pre></td></tr></table></figure><p>然后这个时候就可以正常访问了。</p><p>那么现在有个问题，就是难道每次必须要进入<code>public</code>文件夹才能启动web服务器吗，其实我们可以指定根目录的，那么可以使用如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /home/baoguoxiao/www/php/demo</span><br><span class="line">php -S localhost:8000 -t public/</span><br></pre></td></tr></table></figure><p>那么现在有一个问题就是说，如果我们使用了单入口，而且还是用了PATHINFO模式。那么上面的可能就有问题了。</p><p>对此，我们可以使用如下方案：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /home/baoguoxiao/www/php/demo</span><br><span class="line">php -S localhost:8000 router.php</span><br></pre></td></tr></table></figure><p>router.php 文件的代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 对URL进行解析，并获取请求的文件名</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">$uri = urldecode(parse_url($_SERVER[<span class="string">"REQUEST_URI"</span>], PHP_URL_PATH));</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 判断是否存在该文件，如果不存在，则直接继续加载入口文件</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">if</span> ($uri !== <span class="string">"/"</span> &amp;&amp; file_exists(<span class="keyword">__DIR__</span> . <span class="string">"$uri"</span>)) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 加载入口文件</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">require_once</span> <span class="string">"./index.php"</span>;</span><br></pre></td></tr></table></figure><p>通过这个路由文件，我们就可以支持目前常用的开发情况了。</p><h2 id="框架参考"><a href="#框架参考" class="headerlink" title="框架参考"></a>框架参考</h2><p>上面的方式是我们自己的实现，那么我们也可以看看相关知名框架的实现方法。</p><p>比如 Laravel 和 Symfony。</p><h3 id="Laravel"><a href="#Laravel" class="headerlink" title="Laravel"></a>Laravel</h3><p>在Laravel中的<a href="https://laravel.com/docs/5.8/installation#installing-laravel" target="_blank" rel="noopener">安装</a>一节中介绍了一个命令可以使用PHP内置web服务器实现外部访问的命令。实现的命令是：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php artisan serve</span><br></pre></td></tr></table></figure><p>我们可以看一下相关代码：</p><p>具体的文件路径为：vendor/laravel/framework/src/Illuminate/Foundation/Console/ServeCommand.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 执行命令.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> int</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> \Exception</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">handle</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 切换路径到 public 目录</span></span><br><span class="line">    chdir(public_path());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在命令台进行输出相关内容</span></span><br><span class="line">    <span class="keyword">$this</span>-&gt;line(<span class="string">"&lt;info&gt;Laravel development server started:&lt;/info&gt; &lt;http://&#123;$this-&gt;host()&#125;:&#123;$this-&gt;port()&#125;&gt;"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 执行外部程序，并且 $status 为系统的返回状态</span></span><br><span class="line">    passthru(<span class="keyword">$this</span>-&gt;serverCommand(), $status);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// $status 为0 表示执行正常, 为其他大于0的数字表示出现了错误，有可能是端口被抢占了，这个时候就会接着判断是否进行再次尝试</span></span><br><span class="line">    <span class="keyword">if</span> ($status &amp;&amp; <span class="keyword">$this</span>-&gt;canTryAnotherPort()) &#123;</span><br><span class="line">        <span class="comment">// 对绑定的端口号加1 默认是8000, 如果失败则重试端口号为8001，再次失败重试端口号为8002，以此类推。</span></span><br><span class="line">        <span class="keyword">$this</span>-&gt;portOffset += <span class="number">1</span>;</span><br><span class="line">        <span class="comment">// 再次调用此程序</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;handle();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 返回状态值</span></span><br><span class="line">    <span class="keyword">return</span> $status;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取完整的 server 命令.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> string</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">serverCommand</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> sprintf(<span class="string">'%s -S %s:%s %s'</span>,</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 获取PHP可执行命令的路径</span></span><br><span class="line">        ProcessUtils::escapeArgument((<span class="keyword">new</span> PhpExecutableFinder)-&gt;find(<span class="keyword">false</span>)),</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 获取需要绑定的host</span></span><br><span class="line">        <span class="keyword">$this</span>-&gt;host(),</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取需要绑定的端口</span></span><br><span class="line">        <span class="keyword">$this</span>-&gt;port(),</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 对需要执行的参数进行转义处理。这里的 server 就是我们之前说的路由文件，它在项目的根路径下</span></span><br><span class="line">        ProcessUtils::escapeArgument(base_path(<span class="string">'server.php'</span>))</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对上面的命令进行翻译一下，实际上就是执行的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ./public</span><br><span class="line">php -S 0.0.0.0:8000 ../server.php</span><br></pre></td></tr></table></figure><blockquote><p>note:</p><p>这里我们可以看到一个区别就是之前我自己写的代码，host 都是 localhost, 但是这里写的是 0.0.0.0。这两个有什么区别呢？</p><p>其实区别很简单，比如我之前写的 localhost 绑定的ip 是 127.0.0.1, 这个相当于一个回环地址，那么我们就只允许本机的IP进行访问。而 0.0.0.0，则表示我们对ip不进行限制，所有的IP都可以进行访问。</p></blockquote><p>那我们接着再来看看项目根目录下面的<code>server.php</code>:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Laravel - A PHP Framework For Web Artisans</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@package</span>  Laravel</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>   Taylor Otwell &lt;taylor<span class="doctag">@laravel</span>.com&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line">$uri = urldecode(</span><br><span class="line">    parse_url($_SERVER[<span class="string">'REQUEST_URI'</span>], PHP_URL_PATH)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这个文件允许我们从内置 PHP web 服务器中模拟 Apache 的 "mod_rewrite" 功能.</span></span><br><span class="line"><span class="comment">// 这提供了一种测试 Laravel 应用程序的便捷方法,</span></span><br><span class="line"><span class="comment">// 而无需在此安装"真正的" web 服务器软件。</span></span><br><span class="line"><span class="keyword">if</span> ($uri !== <span class="string">'/'</span> &amp;&amp; file_exists(<span class="keyword">__DIR__</span>.<span class="string">'/public'</span>.$uri)) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">require_once</span> <span class="keyword">__DIR__</span>.<span class="string">'/public/index.php'</span>;</span><br></pre></td></tr></table></figure><p>发现跟我之前写的路由文件相同。没错，我就是从这里抄过来的。</p><p>基本上 Larvel 的实现方法就是这样了。</p><h3 id="Symfony"><a href="#Symfony" class="headerlink" title="Symfony"></a>Symfony</h3><p>如果你在使用 Symfony 框架话，发现Symfony有一个组件叫做<a href="https://github.com/symfony/web-server-bundle" target="_blank" rel="noopener">web-server-bundle</a>，这个组件的作用跟Laravel相同，也是不借助web服务器，实现通过浏览器访问应用程序。</p><p>基本的操作可以参考<a href="https://symfony.com/doc/current/setup/built_in_web_server.html" target="_blank" rel="noopener">该页面</a></p><p>我在这里主要说一下Symfony是如何实现的.</p><p>在Symfony中有一段代码是这样的:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">start</span><span class="params">(WebServerConfig $config, $pidFile = null)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 获取默认的PID文件位置</span></span><br><span class="line">    $pidFile = $pidFile ?: <span class="keyword">$this</span>-&gt;getDefaultPidFile();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断是否在运行，如果运行则提示已经在监听了</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;isRunning($pidFile)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> \RuntimeException(sprintf(<span class="string">'A process is already listening on http://%s.'</span>, $config-&gt;getAddress()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// fork了一个子进程，如果成功，会有两个进程进行同时执行下面的文件，父进程，也就是当前执行的进程会返回子进程的PID，而子进程则返回的PID为0，</span></span><br><span class="line">    <span class="comment">// 如果失败，则子进程不会创建，并且父进程会返回的pid为-1。更多内容可查看 https://www.php.net/manual/zh/function.pcntl-fork.php</span></span><br><span class="line">    $pid = pcntl_fork();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 表示fork进程失败</span></span><br><span class="line">    <span class="keyword">if</span> ($pid &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> \RuntimeException(<span class="string">'Unable to start the server process.'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 进入这个判断，表示执行的是父进程，表示不用继续向下执行</span></span><br><span class="line">    <span class="keyword">if</span> ($pid &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">self</span>::STARTED;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从此往后是子进程运行，首先通过 posix_setsid 变为守护进程，意思是使其脱离终端的管理，自立门户，谁也没办法管理这个进程，除了PID。</span></span><br><span class="line">    <span class="keyword">if</span> (posix_setsid() &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> \RuntimeException(<span class="string">'Unable to set the child process as session leader.'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建命令，命令类似Laravel，不过这里的路由文件跟Laravel类似。也是处理加载规则，并加载入口文件。具体的router.php 路径为：</span></span><br><span class="line">    <span class="comment">// vendor\symfony\web-server-bundle/Resources/router.php</span></span><br><span class="line">    <span class="comment">// 下面是禁用输出并且开始运行</span></span><br><span class="line">    $process = <span class="keyword">$this</span>-&gt;createServerProcess($config);</span><br><span class="line">    $process-&gt;disableOutput();</span><br><span class="line">    $process-&gt;start();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断是否运行成功</span></span><br><span class="line">    <span class="keyword">if</span> (!$process-&gt;isRunning()) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> \RuntimeException(<span class="string">'Unable to start the server process.'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 写入PID文件</span></span><br><span class="line">    file_put_contents($pidFile, $config-&gt;getAddress());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 检测PID文件，如果PID文件删除了，那么进程就立即退出。</span></span><br><span class="line">    <span class="keyword">while</span> ($process-&gt;isRunning()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!file_exists($pidFile)) &#123;</span><br><span class="line">            $process-&gt;stop();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        sleep(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回停止的状态</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>::STOPPED;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 启动PHP内置web服务器</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> Process The process</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">createServerProcess</span><span class="params">(WebServerConfig $config)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 查找PHP的可执行程序</span></span><br><span class="line">    $finder = <span class="keyword">new</span> PhpExecutableFinder();</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">false</span> === $binary = $finder-&gt;find(<span class="keyword">false</span>)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> \RuntimeException(<span class="string">'Unable to find the PHP binary.'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $xdebugArgs = ini_get(<span class="string">'xdebug.profiler_enable_trigger'</span>) ? [<span class="string">'-dxdebug.profiler_enable_trigger=1'</span>] : [];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 实例化PHP要执行的命令 php_path -dvariables_order=EGPCS -S 127.0.0.1:8000 vendor\symfony\web-server-bundle/Resources/router.php</span></span><br><span class="line">    $process = <span class="keyword">new</span> Process(array_merge([$binary], $finder-&gt;findArguments(), $xdebugArgs, [<span class="string">'-dvariables_order=EGPCS'</span>, <span class="string">'-S'</span>, $config-&gt;getAddress(), $config-&gt;getRouter()]));</span><br><span class="line">    <span class="comment">// 设置工作目录</span></span><br><span class="line">    $process-&gt;setWorkingDirectory($config-&gt;getDocumentRoot());</span><br><span class="line">    <span class="comment">// 设置超时时间</span></span><br><span class="line">    $process-&gt;setTimeout(<span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置环境变量</span></span><br><span class="line">    <span class="keyword">if</span> (\in_array(<span class="string">'APP_ENV'</span>, explode(<span class="string">','</span>, getenv(<span class="string">'SYMFONY_DOTENV_VARS'</span>)))) &#123;</span><br><span class="line">        $process-&gt;setEnv([<span class="string">'APP_ENV'</span> =&gt; <span class="keyword">false</span>]);</span><br><span class="line">        $process-&gt;inheritEnvironmentVariables();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回相关变量</span></span><br><span class="line">    <span class="keyword">return</span> $process;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我在上面的代码中进行了注释, 描述了Symfony是如何启动的.</p><p>里面有一个问题就是使用<a href="https://www.php.net/manual/zh/function.pcntl-fork.php" target="_blank" rel="noopener"><code>pcntl_fork</code></a>, 该扩展在Windows中是不受支持的. 所以 Symfony框架会提示使用<code>php bin/console server:run</code>命令运行程序.</p><h2 id="未来展望"><a href="#未来展望" class="headerlink" title="未来展望"></a>未来展望</h2><p>其实还有一个方式, 就是 Workman 是通过自身的实现的web服务器，它并没有借助<code>php -S</code>命令。这一块的代码我还没有吃透，并且我觉得这个也可以单独拎几章出来讲。希望以后有这个机会。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过我们学习 PHP 命令实现web服务器访问以及对 Laravel 和 Symfony 框架的分析, 让我了解到在Windows的开发过程中,我们完全可以借助该方式来摆脱对web服务器的依赖.既能方便我们在Windows环境进行开发并且学习了PHP一个技巧.感觉挺好的.</p><p>大家如果对此有什么疑问可以评论进行交流.</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://www.php.net/manual/zh/features.commandline.webserver.php" target="_blank" rel="noopener">PHP: 内置Web Server - Manual </a></li><li><a href="https://laravel.com/" target="_blank" rel="noopener">Laravel</a></li><li><a href="https://symfony.com/doc/current/setup/built_in_web_server.html" target="_blank" rel="noopener">How to Use PHP’s built-in Web Server</a></li><li><a href="https://www.php.net/manual/zh/function.pcntl-fork.php" target="_blank" rel="noopener">PHP: pcntl_fork - Manual</a></li><li><a href="https://www.php.net/manual/zh/function.posix-setsid.php" target="_blank" rel="noopener">PHP: posix_setsid - Manual</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;PHP从5.4开始，就提供了一个内置的web服务器。&lt;/p&gt;
&lt;p&gt;这个主要是用来做本地的开发用的。不能用于线上环境。现在我就介绍一下这个工具如何使用。&lt;/p&gt;
    
    </summary>
    
    
      <category term="编程语言" scheme="http://www.baoguoxiao.com/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
      <category term="php" scheme="http://www.baoguoxiao.com/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/php/"/>
    
    
      <category term="php" scheme="http://www.baoguoxiao.com/tags/php/"/>
    
      <category term="web server" scheme="http://www.baoguoxiao.com/tags/web-server/"/>
    
  </entry>
  
  <entry>
    <title>nginx 自定义日志记录请求时间</title>
    <link href="http://www.baoguoxiao.com/2019/02/17/nginx-statistics-request-time/"/>
    <id>http://www.baoguoxiao.com/2019/02/17/nginx-statistics-request-time/</id>
    <published>2019-02-17T15:33:39.000Z</published>
    <updated>2020-02-08T14:04:59.901Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近想要统计项目中的请求时间，来判断那些请求响应时间来进行优化对应的代码。</p><p>传统办法是使用PHP在项目的入口文件和输出的分别计算时间，然后计算时间差值。但是这种的话，非常麻烦，而且需要修改项目文件，改动较大。如果你对nginx比较了解的话，你就会发现nginx也有统计请求时间的功能，而且配置一下就能实现该功能。</p><a id="more"></a><p>下面就介绍一下nginx统计请求时间的方式。</p><h2 id="环境介绍"><a href="#环境介绍" class="headerlink" title="环境介绍"></a>环境介绍</h2><ul><li>Linux环境：Ubuntu 18.10</li><li>Nginx版本：1.15.5</li><li>PHP版本：7.2.15</li></ul><p>我为了能测试该功能，特意搭建了一个phpmyadmin项目来统计访问的请求时间。</p><h2 id="定义log格式"><a href="#定义log格式" class="headerlink" title="定义log格式"></a>定义log格式</h2><p>对于记录请求时间，那么我们需要定义个log格式，来记录请求的URL以及请求处理时间。</p><p>该定义在<code>/etc/nginx/nginx.conf</code>中：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 注意这一行</span></span><br><span class="line">    <span class="attribute">log_format</span> statistics_time <span class="string">"<span class="variable">$request</span> <span class="variable">$request_time</span>"</span>;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面介绍一下这行配置的意义：</p><ul><li><code>log_format</code> 定义nginx log格式的指令</li><li><code>statistics_time</code> 定义log格式的名称</li><li><code>$request</code> 请求的URI和HTTP协议，如： “GET /article-10000.html HTTP/1.1”</li><li><code>$request_time</code> 整个请求的总时间，单位为分，精确到微秒。如：0.205</li></ul><h2 id="定义记录位置"><a href="#定义记录位置" class="headerlink" title="定义记录位置"></a>定义记录位置</h2><p>下面打开<code>/etc/nginx/sites-enabled/pma</code>.</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line"><span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line"><span class="attribute">root</span> /home/baoguoxiao/code/php/phpmyadmin;</span><br><span class="line"><span class="attribute">index</span> index.php index.html;</span><br><span class="line"><span class="attribute">server_name</span> pma.lvh.me;</span><br><span class="line"><span class="attribute">location</span> / &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">access_log</span> /var/log/nginx/access_pma.log;</span><br><span class="line">    <span class="attribute">access_log</span> <span class="string">'/var/log/nginx/time_pma.log'</span> statistics_time; <span class="comment"># 注意这行</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">location</span> <span class="regexp">~ \.php$</span> &#123;</span><br><span class="line"><span class="attribute">include</span> snippets/fastcgi-php.conf;</span><br><span class="line"><span class="attribute">fastcgi_pass</span> unix:/var/run/php/php7.2-fpm.sock;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面解释一下这一行的指令：</p><ul><li><code>access_log</code> nginx 设置访客log路径的指令</li><li><code>/var/log/nginx/time_pma.log</code> 定义访问日志的路径</li><li><code>statistics_time</code> log格式的名称，对应上面的自定义log格式</li></ul><p>配置好之后，就可以重启nginx，查看效果了。下面就是我查看的日志的部分内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET &#x2F; HTTP&#x2F;1.1 0.037</span><br><span class="line">POST &#x2F;ajax.php HTTP&#x2F;1.1 0.012</span><br><span class="line">POST &#x2F;navigation.php?ajax_request&#x3D;1 HTTP&#x2F;1.1 0.018</span><br><span class="line">POST &#x2F;ajax.php HTTP&#x2F;1.1 0.019</span><br><span class="line">POST &#x2F;ajax.php HTTP&#x2F;1.1 0.011</span><br><span class="line">POST &#x2F;version_check.php HTTP&#x2F;1.1 0.008</span><br><span class="line">GET &#x2F;favicon.ico HTTP&#x2F;1.1 0.000</span><br><span class="line">GET &#x2F;db_structure.php?server&#x3D;1&amp;db&#x3D;mysql&amp;ajax_request&#x3D;true&amp;ajax_page_request&#x3D;true&amp;_nocache&#x3D;1550413689281586612&amp;token&#x3D;%3B%24*%5DFp%7BVsh%40~8%5D9t HTTP&#x2F;1.1 0.126</span><br></pre></td></tr></table></figure><h2 id="实现按天区分"><a href="#实现按天区分" class="headerlink" title="实现按天区分"></a>实现按天区分</h2><p>如何实现按天分配，网上介绍的方式都太重了。我感觉应该nginx是可以自己实现分天记录日志的。在我的不懈搜索之下，真让我找到了。</p><p>本次修改都是只需要修改一个文件就可以了：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># /etc/nginx/sites-enabled/pma</span></span><br><span class="line"></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">    if ($time_iso8601 ~ "^(\d&#123;4&#125;)-(\d&#123;2&#125;)-(\d&#123;2&#125;)") &#123;</span><br><span class="line">        <span class="attribute">set</span> <span class="variable">$date</span> <span class="variable">$1</span><span class="variable">$2</span><span class="variable">$3</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">access_log</span> /var/log/nginx/time_pma_<span class="variable">$date</span>.log statistics_time;</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是在实际运行中并不会出现对应的日志，通过查看<code>error.log</code>可以看到如下错误：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2019&#x2F;02&#x2F;17 22:33:09 [crit] 54018#54018: *58 open() &quot;&#x2F;var&#x2F;log&#x2F;nginx&#x2F;time_pma_20190217.log&quot; failed (13: Permission denied) while logging request, client: 192.168.1.230, server: pma.lvh.me, request: &quot;POST &#x2F;navigation.php?ajax_request&#x3D;1 HTTP&#x2F;1.1&quot;, upstream: &quot;fastcgi:&#x2F;&#x2F;unix:&#x2F;var&#x2F;run&#x2F;php&#x2F;php7.2-fpm.sock&quot;, host: &quot;pma.lvh.me&quot;</span><br></pre></td></tr></table></figure><p>通过该日志可以明白是权限的问题导致的该情况。</p><p>所以执行以下命令对文件夹进行赋予权限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chown www-data /var/<span class="built_in">log</span>/nginx -R</span><br></pre></td></tr></table></figure><p>这里我的<code>nginx</code>运行的用户是<code>www-data</code>，如果你的<code>nginx</code>用户是<code>www</code>，那么你就要将上面命令中的<code>www-data</code>修改为<code>www</code>再执行。</p><p>这样就可以看到生成的对应文件了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ls</span><br><span class="line">access.log  access_pma.log  error.log  time_pma_20190217.log  time_pma.log</span><br></pre></td></tr></table></figure><h2 id="下一步"><a href="#下一步" class="headerlink" title="下一步"></a>下一步</h2><p>下一步思考如何将nginx进行入库，然后实现各种查询和聚合查询。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过上面的方式通过nginx的配置可以做很多的事情。今天要多多加强对于nginx配置的了解。这样通过一些简单的配置，可以做更多的事情，从而减轻自己的工作量。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://www.cnblogs.com/kevingrace/p/5893499.html" target="_blank" rel="noopener">https://www.cnblogs.com/kevingrace/p/5893499.html</a></li><li><a href="http://wfsovereign.github.io/2018/05/10/NGINX%E6%8C%89%E5%A4%A9%E7%94%9F%E6%88%90%E6%97%A5%E5%BF%97%E6%96%87%E4%BB%B6%E7%9A%84%E7%AE%80%E6%98%93%E9%85%8D%E7%BD%AE/" target="_blank" rel="noopener">http://wfsovereign.github.io/2018/05/10/NGINX%E6%8C%89%E5%A4%A9%E7%94%9F%E6%88%90%E6%97%A5%E5%BF%97%E6%96%87%E4%BB%B6%E7%9A%84%E7%AE%80%E6%98%93%E9%85%8D%E7%BD%AE/</a></li><li><a href="http://returnc.com/detail/3685" target="_blank" rel="noopener">http://returnc.com/detail/3685</a></li><li><a href="http://nginx.org/en/docs/http/ngx_http_log_module.html" target="_blank" rel="noopener">http://nginx.org/en/docs/http/ngx_http_log_module.html</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;最近想要统计项目中的请求时间，来判断那些请求响应时间来进行优化对应的代码。&lt;/p&gt;
&lt;p&gt;传统办法是使用PHP在项目的入口文件和输出的分别计算时间，然后计算时间差值。但是这种的话，非常麻烦，而且需要修改项目文件，改动较大。如果你对nginx比较了解的话，你就会发现nginx也有统计请求时间的功能，而且配置一下就能实现该功能。&lt;/p&gt;
    
    </summary>
    
    
      <category term="web服务器" scheme="http://www.baoguoxiao.com/categories/web%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
      <category term="nginx" scheme="http://www.baoguoxiao.com/categories/web%E6%9C%8D%E5%8A%A1%E5%99%A8/nginx/"/>
    
    
      <category term="nginx" scheme="http://www.baoguoxiao.com/tags/nginx/"/>
    
      <category term="log" scheme="http://www.baoguoxiao.com/tags/log/"/>
    
  </entry>
  
  <entry>
    <title>个人所得税2019</title>
    <link href="http://www.baoguoxiao.com/2019/01/07/personal-income-tax-2019/"/>
    <id>http://www.baoguoxiao.com/2019/01/07/personal-income-tax-2019/</id>
    <published>2019-01-07T13:47:31.000Z</published>
    <updated>2020-02-08T14:04:59.901Z</updated>
    
    <content type="html"><![CDATA[<p>首先确定一下新版个税修改的地方：</p><ol><li>个税起征点从3500增加到5000</li><li>新增个税附加扣除，具体就不说了，网上的资料太多了。</li><li>使用累计预扣法预扣税款。</li></ol><a id="more"></a><p>所以计算公式修改为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">累计预扣预缴应纳税所得额 &#x3D; 累计收入 - 累计免税收入 - 累计减除费用 - 累计专项扣除 - 累计专项附加扣除 - 累计依法确定的其他扣除</span><br><span class="line"></span><br><span class="line">本期应预扣预缴税额 &#x3D;（累计预扣预缴应纳税所得额 × 预扣率 - 速算扣除数) - 累计减免税额 - 累计已预扣预缴税额</span><br></pre></td></tr></table></figure><p>看起公式来比较枯燥。我们直接举例子吧，大家直接带入进行计算。</p><p>比如说小A，他月工资1W，然后五险一金2000元，附加扣除1500元。那么小A能拿到的的工资是多少呢？</p><p>现在我们套用上面的公式计算前三月的工资的工资：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">1月份</span><br><span class="line"></span><br><span class="line">10000(累计收入) * 1(月份) - 0(累计免税收入) * 1(月份) - 5000(累计减除费用) * 1(月份) - 2000(累计专项扣除) * 1(月份) - 1500(累计专项附加扣除) * 1 - 0(累计依法确定的其他扣除) * 1(月份) &#x3D; 1500(累计预扣预缴应纳税所得额)</span><br><span class="line"></span><br><span class="line">(1500(累计预扣预缴应纳税所得额) * 3%(预扣率) - 0(速算扣除数)) - 0(累计减免税额) - 0(累计已预扣预缴税额) &#x3D; 45(本期应预扣预缴税额)</span><br><span class="line"></span><br><span class="line">2月份</span><br><span class="line"></span><br><span class="line">10000(累计收入) * 2(月份) - 0(累计免税收入) * 2(月份) - 5000(累计减除费用) * 2(月份) - 2000(累计专项扣除) * 2(月份) - 1500(累计专项附加扣除) * 2 - 0(累计依法确定的其他扣除) * 2(月份) &#x3D; 3000(累计预扣预缴应纳税所得额)</span><br><span class="line"></span><br><span class="line">(3000(累计预扣预缴应纳税所得额) * 3%(预扣率) - 0(速算扣除数)) - 0(累计减免税额) - 45(累计已预扣预缴税额) &#x3D; 45(本期应预扣预缴税额)</span><br><span class="line"></span><br><span class="line">3月份</span><br><span class="line">10000(累计收入) * 3(月份) - 0(累计免税收入) * 3(月份) - 5000(累计减除费用) * 3(月份) - 2000(累计专项扣除) * 3(月份) - 1500(累计专项附加扣除) * 3 - 0(累计依法确定的其他扣除) * 3(月份) &#x3D; 4500(累计预扣预缴应纳税所得额)</span><br><span class="line"></span><br><span class="line">(4500(累计预扣预缴应纳税所得额) * 3%(预扣率) - 0(速算扣除数)) - 0(累计减免税额) - 90(累计已预扣预缴税额, 前两个月的交税总额) &#x3D; 45(本期应预扣预缴税额)</span><br></pre></td></tr></table></figure><blockquote><p>预扣率可以参考后面的个税税率表</p></blockquote><p>那么这么算起来，小A每个月的可获得工资为：</p><table><thead><tr><th align="center">月份</th><th align="center">本月工资</th><th align="center">累计预扣预缴应纳税所得额</th><th align="center">本期应预扣预缴税额</th><th align="center">税后工资</th></tr></thead><tbody><tr><td align="center">01月份</td><td align="center">10000</td><td align="center">1500</td><td align="center">45</td><td align="center">7955</td></tr><tr><td align="center">02月份</td><td align="center">10000</td><td align="center">3000</td><td align="center">45</td><td align="center">7955</td></tr><tr><td align="center">03月份</td><td align="center">10000</td><td align="center">4500</td><td align="center">45</td><td align="center">7955</td></tr><tr><td align="center">04月份</td><td align="center">10000</td><td align="center">6000</td><td align="center">45</td><td align="center">7955</td></tr><tr><td align="center">05月份</td><td align="center">10000</td><td align="center">7500</td><td align="center">45</td><td align="center">7955</td></tr><tr><td align="center">06月份</td><td align="center">10000</td><td align="center">9000</td><td align="center">45</td><td align="center">7955</td></tr><tr><td align="center">07月份</td><td align="center">10000</td><td align="center">10500</td><td align="center">45</td><td align="center">7955</td></tr><tr><td align="center">08月份</td><td align="center">10000</td><td align="center">12000</td><td align="center">45</td><td align="center">7955</td></tr><tr><td align="center">09月份</td><td align="center">10000</td><td align="center">13500</td><td align="center">45</td><td align="center">7955</td></tr><tr><td align="center">10月份</td><td align="center">10000</td><td align="center">15000</td><td align="center">45</td><td align="center">7955</td></tr><tr><td align="center">11月份</td><td align="center">10000</td><td align="center">16500</td><td align="center">45</td><td align="center">7955</td></tr><tr><td align="center">12月份</td><td align="center">10000</td><td align="center">18000</td><td align="center">45</td><td align="center">7955</td></tr></tbody></table><p>如果小B月工资是20000，然后五险一金4000元，附加扣除1500元。那么小B能拿到的的工资是多少呢？</p><table><thead><tr><th align="center">月份</th><th align="center">本月工资</th><th align="center">累计预扣预缴应纳税所得额</th><th align="center">本期应预扣预缴税额</th><th align="center">税后工资</th></tr></thead><tbody><tr><td align="center">01月份</td><td align="center">10000</td><td align="center">9500</td><td align="center">285</td><td align="center">15715</td></tr><tr><td align="center">02月份</td><td align="center">10000</td><td align="center">19000</td><td align="center">285</td><td align="center">15715</td></tr><tr><td align="center">03月份</td><td align="center">10000</td><td align="center">28500</td><td align="center">285</td><td align="center">15715</td></tr><tr><td align="center">04月份</td><td align="center">10000</td><td align="center">38000</td><td align="center">425</td><td align="center">15575</td></tr><tr><td align="center">05月份</td><td align="center">10000</td><td align="center">47500</td><td align="center">950</td><td align="center">15050</td></tr><tr><td align="center">06月份</td><td align="center">10000</td><td align="center">57000</td><td align="center">950</td><td align="center">15050</td></tr><tr><td align="center">07月份</td><td align="center">10000</td><td align="center">66500</td><td align="center">950</td><td align="center">15050</td></tr><tr><td align="center">08月份</td><td align="center">10000</td><td align="center">76000</td><td align="center">950</td><td align="center">15050</td></tr><tr><td align="center">09月份</td><td align="center">10000</td><td align="center">85500</td><td align="center">950</td><td align="center">15050</td></tr><tr><td align="center">10月份</td><td align="center">10000</td><td align="center">95000</td><td align="center">950</td><td align="center">15050</td></tr><tr><td align="center">11月份</td><td align="center">10000</td><td align="center">104500</td><td align="center">950</td><td align="center">15050</td></tr><tr><td align="center">12月份</td><td align="center">10000</td><td align="center">114000</td><td align="center">950</td><td align="center">15050</td></tr></tbody></table><p>具体大家可以套用公式对自己的薪资进行计算，或者按照下面参考链接中的工资计算器进行计算。</p><h2 id="年终奖计算办法"><a href="#年终奖计算办法" class="headerlink" title="年终奖计算办法"></a>年终奖计算办法</h2><p>待续</p><h2 id="个税税率表"><a href="#个税税率表" class="headerlink" title="个税税率表"></a>个税税率表</h2><p>| 级数 | 累计预扣预缴应纳税所得额 | 预扣率（%） | 速算扣除数 |<br>|:—:|:—:|:—:|:—:|:—:|<br>| 1 | 不超过36000元的 | 3 | 0 |<br>| 2 | 超过36000元至144000元的部分 | 10 | 2520|<br>| 3 | 超过144000元至300000元的部分 | 20 | 16920 |<br>| 4 | 超过300000元至420000元的部分 | 25 | 31920 |<br>| 5 | 超过420000元至660000元的部分 | 30 | 52920 |<br>| 6 | 超过660000元至960000元的部分 | 35 | 85920 |<br>| 7 | 超过960000元的部分 | 45 | 181920 |</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://www.gerensuodeshui.cn/" target="_blank" rel="noopener">工资计算器 | 个税计算器2019 - 个人所得税计算器2019</a></li><li><a href="http://www.chinatax.gov.cn/n810341/n810755/c3978994/content.html" target="_blank" rel="noopener">关于个人所得税法修改后有关优惠政策衔接问题的通知</a></li><li><a href="http://www.chinatax.gov.cn/n810341/n810760/c3959585/content.html" target="_blank" rel="noopener">关于《国家税务总局关于发布&lt;个人所得税扣缴申报管理办法（试行）&gt;的公告》的解读</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;首先确定一下新版个税修改的地方：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;个税起征点从3500增加到5000&lt;/li&gt;
&lt;li&gt;新增个税附加扣除，具体就不说了，网上的资料太多了。&lt;/li&gt;
&lt;li&gt;使用累计预扣法预扣税款。&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="随笔" scheme="http://www.baoguoxiao.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
  </entry>
  
  <entry>
    <title>bind9的初步使用（2）</title>
    <link href="http://www.baoguoxiao.com/2018/12/16/bind9-use-2/"/>
    <id>http://www.baoguoxiao.com/2018/12/16/bind9-use-2/</id>
    <published>2018-12-16T16:22:00.000Z</published>
    <updated>2020-02-08T14:04:59.897Z</updated>
    
    <content type="html"><![CDATA[<h2 id="设置局域网访问"><a href="#设置局域网访问" class="headerlink" title="设置局域网访问"></a>设置局域网访问</h2><p>比如我的windows 10的ip地址是192.168.1.230。那么我们可以添加如下内容到<code>/etc/bind/named.conf.options</code>文件中。</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">listen-on &#123;</span><br><span class="line">    192.168.1.230;</span><br><span class="line">    192.168.1.231;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>填写完成后打开<code>/etc/bind/named.conf.options</code>内容如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">$ cat /etc/<span class="built_in">bind</span>/named.conf.options </span><br><span class="line">options &#123;</span><br><span class="line">directory <span class="string">"/var/cache/bind"</span>;</span><br><span class="line"></span><br><span class="line">// If there is a firewall between you and nameservers you want</span><br><span class="line">// to talk to, you may need to fix the firewall to allow multiple</span><br><span class="line">// ports to talk.  See http://www.kb.cert.org/vuls/id/800113</span><br><span class="line"></span><br><span class="line">// If your ISP provided one or more IP addresses <span class="keyword">for</span> stable </span><br><span class="line">// nameservers, you probably want to use them as forwarders.  </span><br><span class="line">// Uncomment the following block, and insert the addresses replacing </span><br><span class="line">// the all-0<span class="string">'s placeholder.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// forwarders &#123;</span></span><br><span class="line"><span class="string">//114.114.114.114;</span></span><br><span class="line"><span class="string">// &#125;;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">//========================================================================</span></span><br><span class="line"><span class="string">// If BIND logs error messages about the root key being expired,</span></span><br><span class="line"><span class="string">// you will need to update your keys.  See https://www.isc.org/bind-keys</span></span><br><span class="line"><span class="string">//========================================================================</span></span><br><span class="line"><span class="string">dnssec-validation auto;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">listen-on-v6 &#123; any; &#125;;</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    listen-on &#123;</span></span><br><span class="line"><span class="string">        192.168.1.230;</span></span><br><span class="line"><span class="string">        192.168.1.231;</span></span><br><span class="line"><span class="string">    &#125;;</span></span><br><span class="line"><span class="string">&#125;;</span></span><br></pre></td></tr></table></figure><p>重启bind9。</p><p>然后在windows 10 上设置DNS为<code>192.168.1.231</code>和<code>114.114.114.114</code>。</p><p>这样我们打开cmd，查看域名是否获取到了正确的ip。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">PS C:\Users\baogu&gt; ping www.baoguoxiao.pro</span><br><span class="line"></span><br><span class="line">正在 Ping www.baoguoxiao.pro [192.168.1.231] 具有 32 字节的数据:</span><br><span class="line">来自 192.168.1.231 的回复: 字节=32 时间&lt;1ms TTL=64</span><br><span class="line">来自 192.168.1.231 的回复: 字节=32 时间&lt;1ms TTL=64</span><br><span class="line">来自 192.168.1.231 的回复: 字节=32 时间&lt;1ms TTL=64</span><br><span class="line">来自 192.168.1.231 的回复: 字节=32 时间=1ms TTL=64</span><br><span class="line"></span><br><span class="line">192.168.1.231 的 Ping 统计信息:</span><br><span class="line">    数据包: 已发送 = 4，已接收 = 4，丢失 = 0 (0% 丢失)，</span><br><span class="line">往返行程的估计时间(以毫秒为单位):</span><br><span class="line">    最短 = 0ms，最长 = 1ms，平均 = 0ms</span><br></pre></td></tr></table></figure><p>但是如果我们这边手机要连怎么办。不能每次都加ip吧。所以这里有个简单的办法。直接将上面的配置修改如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">$ cat /etc/<span class="built_in">bind</span>/named.conf.options </span><br><span class="line">options &#123;</span><br><span class="line">directory <span class="string">"/var/cache/bind"</span>;</span><br><span class="line"></span><br><span class="line">// If there is a firewall between you and nameservers you want</span><br><span class="line">// to talk to, you may need to fix the firewall to allow multiple</span><br><span class="line">// ports to talk.  See http://www.kb.cert.org/vuls/id/800113</span><br><span class="line"></span><br><span class="line">// If your ISP provided one or more IP addresses <span class="keyword">for</span> stable </span><br><span class="line">// nameservers, you probably want to use them as forwarders.  </span><br><span class="line">// Uncomment the following block, and insert the addresses replacing </span><br><span class="line">// the all-0<span class="string">'s placeholder.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// forwarders &#123;</span></span><br><span class="line"><span class="string">// 0.0.0.0;</span></span><br><span class="line"><span class="string">// &#125;;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">//========================================================================</span></span><br><span class="line"><span class="string">// If BIND logs error messages about the root key being expired,</span></span><br><span class="line"><span class="string">// you will need to update your keys.  See https://www.isc.org/bind-keys</span></span><br><span class="line"><span class="string">//========================================================================</span></span><br><span class="line"><span class="string">dnssec-validation auto;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">listen-on-v6 &#123; any; &#125;;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    listen-on &#123;</span></span><br><span class="line"><span class="string">        any;</span></span><br><span class="line"><span class="string">    &#125;;</span></span><br><span class="line"><span class="string">&#125;;</span></span><br></pre></td></tr></table></figure><p>这样直接将ip列表修改为any。就可以接收所有的ip了。</p><p>这个时候我们将bind9再次重启。</p><p>首先安装一个nginx。具体的安装教程可查看我的另外一篇文章 <a href="/2018/12/16/apt-install-nginx/" title="ubuntu 中使用 apt 安装 nginx">ubuntu 中使用 apt 安装 nginx</a></p><p>安装之后，如果访问192.168.1.231，就能看到默认的nginx页面了。</p><h2 id="手机测试"><a href="#手机测试" class="headerlink" title="手机测试"></a>手机测试</h2><p>每个手机是设置是不同的。我这里是iphone，版本是12.1.1。</p><p>进入设置-&gt;无线局域网-&gt;在已连接的WIFI右边点击带圈的感叹号-&gt;配置DNS-&gt;选择手动。</p><p>最后点击添加服务器，输入我们虚拟机的地址：192.168.1.231。</p><p>这个时候我们在手机的浏览器里面输入我们之前设置的域名 <a href="http://www.baoguoxiao.pro" target="_blank" rel="noopener">www.baoguoxiao.pro</a> 。就能看到我们经典的nginx主页了。</p><p>这样我们就可以使用手机访问我们的电脑页面了。在调试某些情况的时候，是不是感觉会非常方便呢。</p><h2 id="泛域名设置"><a href="#泛域名设置" class="headerlink" title="泛域名设置"></a>泛域名设置</h2><p>在开发的时候，可能会出现使用多个域名的情况，但是如果每次添加域名都要设置bind9，还要重启，非常麻烦，那么有没有简单的办法呢？有，就是使用泛域名设置。</p><p>废话不多说，请看如下配置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">$ cat /etc/<span class="built_in">bind</span>/zones/baoguoxiao.pro.db </span><br><span class="line">; BIND data file <span class="keyword">for</span> baoguoxiao.pro</span><br><span class="line">;</span><br><span class="line"><span class="variable">$TTL</span> 14400</span><br><span class="line">@ IN SOA ns1.baoguoxiao.pro. host.baoguoxiao.pro. (</span><br><span class="line">201006601 ; Serial</span><br><span class="line">7200 ; Refresh</span><br><span class="line">120 ; Retry</span><br><span class="line">2419200 ; Expire</span><br><span class="line">604800) ; Default TTL</span><br><span class="line">;</span><br><span class="line">baoguoxiao.pro. IN NS ns1.baoguoxiao.pro.</span><br><span class="line"> </span><br><span class="line">;baoguoxiao.pro. IN A 192.168.1.231</span><br><span class="line"> </span><br><span class="line">ns1 IN A 192.168.1.231</span><br><span class="line">www IN A 192.168.1.231</span><br></pre></td></tr></table></figure><p>这个是我们之前<a href="/2018/12/16/bind9-use-1/" title="bind9的初步使用（1）">bind9的初步使用（1）</a>对其的设置。那么如果要设置泛域名，只需要把最后一行的<code>www</code>更改为<code>*</code>就可以了。</p><p>那么切换后的配置如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">$ cat /etc/<span class="built_in">bind</span>/zones/baoguoxiao.pro.db </span><br><span class="line">; BIND data file <span class="keyword">for</span> baoguoxiao.pro</span><br><span class="line">;</span><br><span class="line"><span class="variable">$TTL</span> 14400</span><br><span class="line">@ IN SOA ns1.baoguoxiao.pro. host.baoguoxiao.pro. (</span><br><span class="line">201006601 ; Serial</span><br><span class="line">7200 ; Refresh</span><br><span class="line">120 ; Retry</span><br><span class="line">2419200 ; Expire</span><br><span class="line">604800) ; Default TTL</span><br><span class="line">;</span><br><span class="line">baoguoxiao.pro. IN NS ns1.baoguoxiao.pro.</span><br><span class="line"> </span><br><span class="line">;baoguoxiao.pro. IN A 192.168.1.231</span><br><span class="line"> </span><br><span class="line">ns1 IN A 192.168.1.231</span><br><span class="line">* IN A 192.168.1.231</span><br></pre></td></tr></table></figure><p>最后重启一下，那么泛域名设置就成功了。</p><p>不早了，要去睡觉了。</p><p>晚安。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;设置局域网访问&quot;&gt;&lt;a href=&quot;#设置局域网访问&quot; class=&quot;headerlink&quot; title=&quot;设置局域网访问&quot;&gt;&lt;/a&gt;设置局域网访问&lt;/h2&gt;&lt;p&gt;比如我的windows 10的ip地址是192.168.1.230。那么我们可以添加如下内容到&lt;code&gt;/etc/bind/named.conf.options&lt;/code&gt;文件中。&lt;/p&gt;
    
    </summary>
    
    
      <category term="工具" scheme="http://www.baoguoxiao.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="bind9" scheme="http://www.baoguoxiao.com/categories/%E5%B7%A5%E5%85%B7/bind9/"/>
    
    
      <category term="bind9" scheme="http://www.baoguoxiao.com/tags/bind9/"/>
    
  </entry>
  
  <entry>
    <title>ubuntu 中使用 apt 安装 nginx</title>
    <link href="http://www.baoguoxiao.com/2018/12/16/apt-install-nginx/"/>
    <id>http://www.baoguoxiao.com/2018/12/16/apt-install-nginx/</id>
    <published>2018-12-16T16:09:38.000Z</published>
    <updated>2019-12-08T10:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>使用 <code>apt</code> 安装 <code>nginx</code> ，方便快捷，省去了编译失败的可能。</p><a id="more"></a><h2 id="支持平台"><a href="#支持平台" class="headerlink" title="支持平台"></a>支持平台</h2><table><thead><tr><th align="center">Version</th><th align="center">Codename</th><th align="center">Supported Platforms</th></tr></thead><tbody><tr><td align="center">16.04</td><td align="center">xenial</td><td align="center">x86_64, i386, ppc64el, aarch64/arm64</td></tr><tr><td align="center">18.04</td><td align="center">bionic</td><td align="center">x86_64, aarch64/arm64</td></tr><tr><td align="center">19.04</td><td align="center">disco</td><td align="center">x86_64</td></tr><tr><td align="center">19.10</td><td align="center">eoan</td><td align="center">x86_64</td></tr></tbody></table><p>我这里的ubuntu的环境是 <code>19.10</code> 。通过上面的表格可以了解到我这里是支持安装的。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>首先，我们安装key</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -fsSL https://nginx.org/keys/nginx_signing.key | sudo apt-key add -</span><br></pre></td></tr></table></figure><p>接下来添加 apt repository:</p><p>安装主线版本执行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">"deb http://nginx.org/packages/mainline/ubuntu `lsb_release -cs` nginx"</span> | sudo tee /etc/apt/sources.list.d/nginx.list</span><br></pre></td></tr></table></figure><p>安装稳定版本执行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">"deb http://nginx.org/packages/ubuntu `lsb_release -cs` nginx"</span> | sudo tee /etc/apt/sources.list.d/nginx.list</span><br></pre></td></tr></table></figure><p>接下来执行如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br></pre></td></tr></table></figure><p>下面就可以进行安装了，只需执行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install nginx</span><br></pre></td></tr></table></figure><p>执行完成之后，这样就安装完成了，是不是非常方便呢。</p><h2 id="相关目录"><a href="#相关目录" class="headerlink" title="相关目录"></a>相关目录</h2><p>下面看下配置文件夹的相关目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$ tree /etc/nginx/</span><br><span class="line">/etc/nginx/</span><br><span class="line">├── conf.d</span><br><span class="line">│   └── default.conf</span><br><span class="line">├── fastcgi_params</span><br><span class="line">├── koi-utf</span><br><span class="line">├── koi-win</span><br><span class="line">├── mime.types</span><br><span class="line">├── modules -&gt; /usr/lib/nginx/modules</span><br><span class="line">├── nginx.conf</span><br><span class="line">├── scgi_params</span><br><span class="line">├── uwsgi_params</span><br><span class="line">└── win-utf</span><br><span class="line"></span><br><span class="line">2 directories, 9 files</span><br></pre></td></tr></table></figure><p>日志相关：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ tree /var/<span class="built_in">log</span>/nginx/</span><br><span class="line">/var/<span class="built_in">log</span>/nginx/</span><br><span class="line">├── access.log</span><br><span class="line">└── error.log</span><br><span class="line"></span><br><span class="line">0 directories, 2 files</span><br></pre></td></tr></table></figure><p>缓存相关：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ sudo tree /var/cache/nginx/</span><br><span class="line">/var/cache/nginx/</span><br><span class="line">├── client_temp</span><br><span class="line">├── fastcgi_temp</span><br><span class="line">├── proxy_temp</span><br><span class="line">├── scgi_temp</span><br><span class="line">└── uwsgi_temp</span><br><span class="line"></span><br><span class="line">5 directories, 0 files</span><br></pre></td></tr></table></figure><h2 id="管理命令"><a href="#管理命令" class="headerlink" title="管理命令"></a>管理命令</h2><p>下面看看支持的命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo /etc/init.d/nginx</span><br><span class="line">Usage: /etc/init.d/nginx &#123;start|stop|status|restart|reload|force-reload|upgrade|configtest|check-reload&#125;</span><br></pre></td></tr></table></figure><p>这里介绍几个常用的</p><p>启动：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo /etc/init.d/nginx start</span><br><span class="line">[ ok ] Starting nginx (via systemctl): nginx.service.</span><br></pre></td></tr></table></figure><p>重启：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo /etc/init.d/nginx restart</span><br><span class="line">[ ok ] Restarting nginx (via systemctl): nginx.service.</span><br></pre></td></tr></table></figure><p>状态：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$ sudo /etc/init.d/nginx status</span><br><span class="line">● nginx.service - nginx - high performance web server</span><br><span class="line">   Loaded: loaded (/lib/systemd/system/nginx.service; enabled; vendor preset: enabled)</span><br><span class="line">   Active: active (running) since Sun 2019-12-08 09:51:20 UTC; 18s ago</span><br><span class="line">     Docs: http://nginx.org/en/docs/</span><br><span class="line">  Process: 15032 ExecStart=/usr/sbin/nginx -c /etc/nginx/nginx.conf (code=exited, status=0/SUCCESS)</span><br><span class="line"> Main PID: 15033 (nginx)</span><br><span class="line">    Tasks: 2 (<span class="built_in">limit</span>: 4591)</span><br><span class="line">   Memory: 1.7M</span><br><span class="line">   CGroup: /system.slice/nginx.service</span><br><span class="line">           ├─15033 nginx: master process /usr/sbin/nginx -c /etc/nginx/nginx.conf</span><br><span class="line">           └─15034 nginx: worker process</span><br><span class="line"></span><br><span class="line">Dec 08 09:51:20 baoguoxiao systemd[1]: Starting nginx - high performance web server...</span><br><span class="line">Dec 08 09:51:20 baoguoxiao systemd[1]: Started nginx - high performance web server.</span><br></pre></td></tr></table></figure><p>停止:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo /etc/init.d/nginx stop</span><br><span class="line">[ ok ] Stopping nginx (via systemctl): nginx.service.</span><br></pre></td></tr></table></figure><p>检测配置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo /etc/init.d/nginx configtest</span><br><span class="line">nginx: the configuration file /etc/nginx/nginx.conf syntax is ok</span><br><span class="line">nginx: configuration file /etc/nginx/nginx.conf <span class="built_in">test</span> is successful</span><br></pre></td></tr></table></figure><p>其他的我就不列举了。大家可以自己去试验。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用 &lt;code&gt;apt&lt;/code&gt; 安装 &lt;code&gt;nginx&lt;/code&gt; ，方便快捷，省去了编译失败的可能。&lt;/p&gt;
    
    </summary>
    
    
      <category term="web服务器" scheme="http://www.baoguoxiao.com/categories/web%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
      <category term="nginx" scheme="http://www.baoguoxiao.com/categories/web%E6%9C%8D%E5%8A%A1%E5%99%A8/nginx/"/>
    
    
      <category term="nginx" scheme="http://www.baoguoxiao.com/tags/nginx/"/>
    
      <category term="ubuntu" scheme="http://www.baoguoxiao.com/tags/ubuntu/"/>
    
      <category term="linux" scheme="http://www.baoguoxiao.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>bind9的初步使用（1）</title>
    <link href="http://www.baoguoxiao.com/2018/12/16/bind9-use-1/"/>
    <id>http://www.baoguoxiao.com/2018/12/16/bind9-use-1/</id>
    <published>2018-12-16T14:28:02.000Z</published>
    <updated>2020-02-08T14:04:59.897Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>周五把自己的电脑重装了一下，还是使用的经典的windows+vmware+ubuntu的经典方式（对我来说）。但是我不想每次都修改host文件来实现我的域名访问，所以我在想有没有一个更好的方式，可以让我实现域名映射。这个时候我想到了自己架设一个dns服务器。说干就干，我就准备用dns的开源系统<a href="https://www.isc.org/downloads/bind/" target="_blank" rel="noopener">bind9</a>来搞一番。</p><a id="more"></a><h2 id="环境介绍"><a href="#环境介绍" class="headerlink" title="环境介绍"></a>环境介绍</h2><ul><li>Ubuntu: 18.10 (ip: 192.168.1.230)</li><li>bind9: 9.11.4</li><li>Windows 10 (ip: 192.168.1.230)</li></ul><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>其实安装非常简单，一条命令就搞定了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install bind9</span><br></pre></td></tr></table></figure><h2 id="管理命令"><a href="#管理命令" class="headerlink" title="管理命令"></a>管理命令</h2><p>启动：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start bind9</span><br></pre></td></tr></table></figure><p>停止:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl stop bind9</span><br></pre></td></tr></table></figure><p>重启：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl restart bind9</span><br></pre></td></tr></table></figure><p>状态：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl status bind9</span><br></pre></td></tr></table></figure><h2 id="配置域名"><a href="#配置域名" class="headerlink" title="配置域名"></a>配置域名</h2><p>举个例子，比如现在我们有个域名是：baoguoxiao.pro。现在我们要对这个域名进行虚拟映射。</p><p>首先打开<code>/etc/bind/named.conf.local</code>，追加如下内容到文件尾部：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">zone &quot;baoguoxiao.pro&quot; &#123;</span><br><span class="line">    type master;</span><br><span class="line">    file &quot;&#x2F;etc&#x2F;bind&#x2F;zones&#x2F;baoguoxiao.pro.db&quot;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>那么现在这个文件的内容完整如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;</span><br><span class="line">&#x2F;&#x2F; Do any local configuration here</span><br><span class="line">&#x2F;&#x2F;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Consider adding the 1918 zones here, if they are not used in your</span><br><span class="line">&#x2F;&#x2F; organization</span><br><span class="line">&#x2F;&#x2F;include &quot;&#x2F;etc&#x2F;bind&#x2F;zones.rfc1918&quot;;</span><br><span class="line"></span><br><span class="line">zone &quot;baoguoxiao.pro&quot; &#123;</span><br><span class="line">    type master;</span><br><span class="line">    file &quot;&#x2F;etc&#x2F;bind&#x2F;zones&#x2F;baoguoxiao.pro.db&quot;; &#x2F;&#x2F; 这个文件定义了文件地址</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>我们定义的地址是<code>/etc/bind/zones/baoguoxiao.pro.db</code>。但是我们的<code>/etc/bind/</code>并没有该目录。所以需要如下命令进行创建：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /etc/<span class="built_in">bind</span>/</span><br><span class="line">sudo mkdir zones</span><br></pre></td></tr></table></figure><p>进入该目录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> zones</span><br></pre></td></tr></table></figure><p>然后创建该文件<code>baoguoxiao.pro.db</code>，并追加如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">; BIND data file for baoguoxiao.pro</span><br><span class="line">;</span><br><span class="line">$TTL 14400</span><br><span class="line">@ IN SOA ns1.baoguoxiao.pro. host.baoguoxiao.pro. (</span><br><span class="line">201006601 ; Serial</span><br><span class="line">7200 ; Refresh</span><br><span class="line">120 ; Retry</span><br><span class="line">2419200 ; Expire</span><br><span class="line">604800) ; Default TTL</span><br><span class="line">;</span><br><span class="line">baoguoxiao.pro. IN NS ns1.baoguoxiao.pro.</span><br><span class="line"> </span><br><span class="line">;baoguoxiao.pro. IN A 192.168.1.231</span><br><span class="line"> </span><br><span class="line">ns1 IN A 192.168.1.231</span><br><span class="line">www IN A 192.168.1.231</span><br></pre></td></tr></table></figure><p>这样就设置完成了。然后我们将bind9进行重启。</p><h2 id="测试DNS效果"><a href="#测试DNS效果" class="headerlink" title="测试DNS效果"></a>测试DNS效果</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">$ dig @192.168.1.231 www.baoguoxiao.pro</span><br><span class="line"></span><br><span class="line">; &lt;&lt;&gt;&gt; DiG 9.11.4-3ubuntu5-Ubuntu &lt;&lt;&gt;&gt; @192.168.1.231 www.baoguoxiao.pro</span><br><span class="line">; (1 server found)</span><br><span class="line">;; global options: +cmd</span><br><span class="line">;; Got answer:</span><br><span class="line">;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 35630</span><br><span class="line">;; flags: qr aa rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 1, ADDITIONAL: 2</span><br><span class="line"></span><br><span class="line">;; OPT PSEUDOSECTION:</span><br><span class="line">; EDNS: version: 0, flags:; udp: 4096</span><br><span class="line">; COOKIE: f077ba72f04b75a1ac9b27275c16148f4732abac11c21ce8 (good)</span><br><span class="line">;; QUESTION SECTION:</span><br><span class="line">;www.baoguoxiao.pro.INA</span><br><span class="line"></span><br><span class="line">;; ANSWER SECTION:</span><br><span class="line">www.baoguoxiao.pro.14400INA192.168.1.231</span><br><span class="line"></span><br><span class="line">;; AUTHORITY SECTION:</span><br><span class="line">baoguoxiao.pro.14400INNSns1.baoguoxiao.pro.</span><br><span class="line"></span><br><span class="line">;; ADDITIONAL SECTION:</span><br><span class="line">ns1.baoguoxiao.pro.14400INA192.168.1.231</span><br><span class="line"></span><br><span class="line">;; Query time: 0 msec</span><br><span class="line">;; SERVER: 192.168.1.231<span class="comment">#53(192.168.1.231)</span></span><br><span class="line">;; WHEN: Sun Dec 16 17:02:07 CST 2018</span><br><span class="line">;; MSG SIZE  rcvd: 117</span><br></pre></td></tr></table></figure><p>好了，这样就表示已经配置成功了</p><h2 id="设置默认本机DNS可用"><a href="#设置默认本机DNS可用" class="headerlink" title="设置默认本机DNS可用"></a>设置默认本机DNS可用</h2><p>之前的设置我们需要指定本机的DNS服务器才可以使用，如果我们不指定的话，那么查询该域名是没有效果的：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">$ dig baoguoxiao.pro</span><br><span class="line"></span><br><span class="line">; &lt;&lt;&gt;&gt; DiG 9.11.4-3ubuntu5-Ubuntu &lt;&lt;&gt;&gt; baoguoxiao.pro</span><br><span class="line">;; global options: +cmd</span><br><span class="line">;; Got answer:</span><br><span class="line">;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NXDOMAIN, id: 52385</span><br><span class="line">;; flags: qr rd ra; QUERY: 1, ANSWER: 0, AUTHORITY: 0, ADDITIONAL: 1</span><br><span class="line"></span><br><span class="line">;; OPT PSEUDOSECTION:</span><br><span class="line">; EDNS: version: 0, flags:; udp: 65494</span><br><span class="line">;; QUESTION SECTION:</span><br><span class="line">;baoguoxiao.pro.INA</span><br><span class="line"></span><br><span class="line">;; Query time: 274 msec</span><br><span class="line">;; SERVER: 127.0.0.53<span class="comment">#53(127.0.0.53)</span></span><br><span class="line">;; WHEN: Sun Dec 16 17:03:59 CST 2018</span><br><span class="line">;; MSG SIZE  rcvd: 43</span><br></pre></td></tr></table></figure><p>在ubuntu17.10之后，网卡配置已经更新为netplan。该配置文件的目录是<code>/etc/netplan/</code>。不过里面的文件不一定是相同的名字。我的文件打开是这样的。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$ cat /etc/netplan/50-cloud-init.yaml </span><br><span class="line"><span class="comment"># This file is generated from information provided by</span></span><br><span class="line"><span class="comment"># the datasource.  Changes to it will not persist across an instance.</span></span><br><span class="line"><span class="comment"># To disable cloud-init's network configuration capabilities, write a file</span></span><br><span class="line"><span class="comment"># /etc/cloud/cloud.cfg.d/99-disable-network-config.cfg with the following:</span></span><br><span class="line"><span class="comment"># network: &#123;config: disabled&#125;</span></span><br><span class="line">network:</span><br><span class="line">    ethernets:</span><br><span class="line">        ens33:</span><br><span class="line">            addresses: [192.168.1.231/24]</span><br><span class="line">            dhcp4: <span class="literal">false</span></span><br><span class="line">            dhcp6: <span class="literal">false</span></span><br><span class="line">            gateway4: 192.168.1.1</span><br><span class="line">            nameservers:</span><br><span class="line">                addresses: [192.168.1.231,114.114.114.114]</span><br><span class="line">    version: 2</span><br></pre></td></tr></table></figure><p>注意，我在倒数第二行的数组里面添加本机的服务器<code>192.168.1.231</code>。关于该文件的配置，可以查看我的另外一篇文章：。</p><p>这样我们在本机就可以不指定dns服务器的基础上进行获取域名的ip了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">$ dig www.bgx.me</span><br><span class="line"></span><br><span class="line">; &lt;&lt;&gt;&gt; DiG 9.11.4-3ubuntu5-Ubuntu &lt;&lt;&gt;&gt; www.baoguoxiao.pro</span><br><span class="line">;; global options: +cmd</span><br><span class="line">;; Got answer:</span><br><span class="line">;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 58219</span><br><span class="line">;; flags: qr aa rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 1, ADDITIONAL: 2</span><br><span class="line"></span><br><span class="line">;; OPT PSEUDOSECTION:</span><br><span class="line">; EDNS: version: 0, flags:; udp: 4096</span><br><span class="line">; COOKIE: 15d0881d8eed3292569558cd5c1623fa33a2d05212e7e662 (good)</span><br><span class="line">;; QUESTION SECTION:</span><br><span class="line">;www.baoguoxiao.pro.INA</span><br><span class="line"></span><br><span class="line">;; ANSWER SECTION:</span><br><span class="line">www.baoguoxiao.pro.14400INA192.168.1.231</span><br><span class="line"></span><br><span class="line">;; AUTHORITY SECTION:</span><br><span class="line">baoguoxiao.pro.14400INNSns1.baoguoxiao.pro.</span><br><span class="line"></span><br><span class="line">;; ADDITIONAL SECTION:</span><br><span class="line">ns1.baoguoxiao.pro.14400INA192.168.1.231</span><br><span class="line"></span><br><span class="line">;; Query time: 0 msec</span><br><span class="line">;; SERVER: 192.168.1.231<span class="comment">#53(192.168.1.231)</span></span><br><span class="line">;; WHEN: Sun Dec 16 18:07:54 CST 2018</span><br><span class="line">;; MSG SIZE  rcvd: 117</span><br></pre></td></tr></table></figure><p>本篇文章就说到这里。下一篇讲如何配置可局域网访问。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;周五把自己的电脑重装了一下，还是使用的经典的windows+vmware+ubuntu的经典方式（对我来说）。但是我不想每次都修改host文件来实现我的域名访问，所以我在想有没有一个更好的方式，可以让我实现域名映射。这个时候我想到了自己架设一个dns服务器。说干就干，我就准备用dns的开源系统&lt;a href=&quot;https://www.isc.org/downloads/bind/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;bind9&lt;/a&gt;来搞一番。&lt;/p&gt;
    
    </summary>
    
    
      <category term="工具" scheme="http://www.baoguoxiao.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="bind9" scheme="http://www.baoguoxiao.com/categories/%E5%B7%A5%E5%85%B7/bind9/"/>
    
    
      <category term="bing9" scheme="http://www.baoguoxiao.com/tags/bing9/"/>
    
  </entry>
  
  <entry>
    <title>wordpress升级的编辑器不能用的问题</title>
    <link href="http://www.baoguoxiao.com/2018/12/16/wordpress-upgrade-editor-can-not-be-used/"/>
    <id>http://www.baoguoxiao.com/2018/12/16/wordpress-upgrade-editor-can-not-be-used/</id>
    <published>2018-12-16T08:19:28.000Z</published>
    <updated>2020-02-08T14:04:59.901Z</updated>
    
    <content type="html"><![CDATA[<p>之前看到wordpress升级出来5.0了，昨天就把我的博客给升级了，但是发现了一个问题。</p><p>我之前的插件都是用的<a href="https://wordpress.org/plugins/wp-editormd/" target="_blank" rel="noopener">WP Editor.md</a>，结果更新之后发现不能用了。</p><p>正好我看到wordpres5.0的更新介绍页面，提示如果不喜欢新编辑器，可以将老的编辑器给安装回来试试看。</p><p>我就尝试安装这个<a href="https://wordpress.org/plugins/classic-editor/" target="_blank" rel="noopener">经典编辑器</a>了。</p><p>嘿嘿，又能用了，真香。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;之前看到wordpress升级出来5.0了，昨天就把我的博客给升级了，但是发现了一个问题。&lt;/p&gt;
&lt;p&gt;我之前的插件都是用的&lt;a href=&quot;https://wordpress.org/plugins/wp-editormd/&quot; target=&quot;_blank&quot; rel=&quot;
      
    
    </summary>
    
    
      <category term="编程语言" scheme="http://www.baoguoxiao.com/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
      <category term="php" scheme="http://www.baoguoxiao.com/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/php/"/>
    
    
      <category term="php" scheme="http://www.baoguoxiao.com/tags/php/"/>
    
      <category term="编辑器" scheme="http://www.baoguoxiao.com/tags/%E7%BC%96%E8%BE%91%E5%99%A8/"/>
    
      <category term="wordpress" scheme="http://www.baoguoxiao.com/tags/wordpress/"/>
    
  </entry>
  
  <entry>
    <title>在终端中使用vscode打开文件或者文件夹</title>
    <link href="http://www.baoguoxiao.com/2018/11/16/open-file-or-folder-in-terminal-vscode/"/>
    <id>http://www.baoguoxiao.com/2018/11/16/open-file-or-folder-in-terminal-vscode/</id>
    <published>2018-11-16T07:03:13.000Z</published>
    <updated>2020-02-08T14:04:59.901Z</updated>
    
    <content type="html"><![CDATA[<p>在mac进行开发的时候，有时候项目的目录在访达中不好找到。在终端中进行查找的时候就比较方便，一个<code>cd</code>命令可以切到任何位置。</p><p>但是将项目目录从加入到编辑器中就比较费劲了。</p><p>目前发现了一个特别好玩的东西，就是vscode可以注入code命令，在终端使用code命令打开相应的目录或文件，非常方便。</p><a id="more"></a><p>首先打开vscode软件。</p><p>同时按住<code>shift + command + P</code>打开命令面板。</p><p>找到<code>Install ‘code&#39; command in PATH</code>，并执行。</p><p>那么就可以在终端执行命令了。</p><p>比如我要打开nginx.conf。</p><p>那么就可以在终端执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">code /usr/<span class="built_in">local</span>/etc/nginx/nginx.conf</span><br></pre></td></tr></table></figure><p>打开目录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">code .</span><br></pre></td></tr></table></figure><p>code 还有其他命令选项：</p><table><thead><tr><th align="center">参数</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center"><code>-h</code> 或 <code>--help</code></td><td align="center">code使用说明</td></tr><tr><td align="center"><code>-v</code> 或 <code>--version</code></td><td align="center">VS Code版本（例如：0.10.10）</td></tr><tr><td align="center"><code>-n</code> 或 <code>--new-window</code></td><td align="center">打开一个VS Code新的版本替代默认版本</td></tr><tr><td align="center"><code>-r</code> 或 <code>--reuse-window</code></td><td align="center">强制打开最后活动窗口的文件或文件夹</td></tr><tr><td align="center"><code>-g</code> 或 <code>--goto</code></td><td align="center">当和 ``file:line:column?` 使用时 ，打开文件并定位到一个的特定行和可选的列位置的文件。</td></tr><tr><td align="center">file</td><td align="center">以一个文件名打开。如果文件不存在，此文件将被创建并标记为已编辑</td></tr><tr><td align="center"><code>file:line:column?</code></td><td align="center">以文件的名称在指定行和可选的列的位置打开，你可以以这个方式指定多个文件。但是在使用 <code>file:line:column?</code> 之前必须使用 <code>-g</code> 参数。例如：<code>code -g file:10</code></td></tr><tr><td align="center">folder</td><td align="center">以一个文件夹名打开。你可以指定多个文件夹。例如：<code>code folder folder</code></td></tr><tr><td align="center"><code>-d</code> 或 <code>--diff</code></td><td align="center">打开一个不同的编辑器。需要两个文件路径作为参数。例如：<code>code -d file file</code></td></tr><tr><td align="center"><code>--locale</code></td><td align="center">为VS Code设置显示语言，支持语言环境有：<code>en-US</code> (英语) ，<code>zh-TW</code>（中文繁体），<code>zh-CN</code> (中文简体)，<code>fr</code> ，<code>de</code> ，<code>it</code> ，<code>ja</code> ，<code>ko</code> ，<code>ru</code> ，<code>es</code> 。例如：<code>code . --locale=en-US</code> 设置显示语言为英语</td></tr><tr><td align="center"><code>--disable-extensions</code></td><td align="center">禁用所有安装的插件。下拉选 <code>Show installed Extensions</code> 后插件依然可见，但是永远不会被激活。</td></tr><tr><td align="center"><code>--list-extensions</code></td><td align="center"><code>code --list-extensions</code> 列出被安装的插件</td></tr><tr><td align="center"><code>--install-extension</code></td><td align="center">安装一个插件。提供完整的扩展名 <code>publisher.extension</code> 作为参数。例如：<code>code --install-extension ms-vscode.cpptools</code></td></tr><tr><td align="center"><code>--uninstall-extension</code></td><td align="center">卸载一个插件。提供完整的扩展名 <code>publisher.extension</code> 作为参数.例如 <code>code --uninstall-extension ms-vscode.csharp</code></td></tr><tr><td align="center"><code>-w</code> 或 <code>--wait</code></td><td align="center">等待窗口返回之前关闭</td></tr></tbody></table><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://www.jianshu.com/p/3dda4756eca5" target="_blank" rel="noopener">https://www.jianshu.com/p/3dda4756eca5</a></li><li><a href="https://segmentfault.com/q/1010000005104983" target="_blank" rel="noopener">https://segmentfault.com/q/1010000005104983</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在mac进行开发的时候，有时候项目的目录在访达中不好找到。在终端中进行查找的时候就比较方便，一个&lt;code&gt;cd&lt;/code&gt;命令可以切到任何位置。&lt;/p&gt;
&lt;p&gt;但是将项目目录从加入到编辑器中就比较费劲了。&lt;/p&gt;
&lt;p&gt;目前发现了一个特别好玩的东西，就是vscode可以注入code命令，在终端使用code命令打开相应的目录或文件，非常方便。&lt;/p&gt;
    
    </summary>
    
    
      <category term="工具" scheme="http://www.baoguoxiao.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="vscode" scheme="http://www.baoguoxiao.com/categories/%E5%B7%A5%E5%85%B7/vscode/"/>
    
    
      <category term="vscode" scheme="http://www.baoguoxiao.com/tags/vscode/"/>
    
  </entry>
  
  <entry>
    <title>mac搭建web环境</title>
    <link href="http://www.baoguoxiao.com/2018/11/16/mac-build-web-environment/"/>
    <id>http://www.baoguoxiao.com/2018/11/16/mac-build-web-environment/</id>
    <published>2018-11-16T06:06:11.000Z</published>
    <updated>2020-02-08T14:04:59.901Z</updated>
    
    <content type="html"><![CDATA[<h2 id="homebrew"><a href="#homebrew" class="headerlink" title="homebrew"></a>homebrew</h2><p>在centos上有yum，ubuntu上有apt，而mac则是brew。这个并不是内置的。需要在终端执行命令进行安装。命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/bin/ruby -e <span class="string">"<span class="variable">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)</span>"</span></span><br></pre></td></tr></table></figure><p>安装之后就可以像是linux一样使用包管理了。包的列表可浏览 <a href="https://formulae.brew.sh/formula/" target="_blank" rel="noopener">https://formulae.brew.sh/formula/</a> 。</p><h2 id="nginx"><a href="#nginx" class="headerlink" title="nginx"></a>nginx</h2><p>安装命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install nginx</span><br></pre></td></tr></table></figure><p>启动nginx</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew services start nginx</span><br></pre></td></tr></table></figure><p>重启nginx</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew services restart nginx</span><br></pre></td></tr></table></figure><p>停止nginx</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew services stop nginx</span><br></pre></td></tr></table></figure><h2 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h2><p>安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install php</span><br></pre></td></tr></table></figure><p>启动php</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew services start php</span><br></pre></td></tr></table></figure><p>重启php</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew services restart php</span><br></pre></td></tr></table></figure><p>停止php</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew services stop php</span><br></pre></td></tr></table></figure><h2 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h2><p>安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install mysql</span><br></pre></td></tr></table></figure><p>启动命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew services start mysql</span><br></pre></td></tr></table></figure><p>重启命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew services restart mysql</span><br></pre></td></tr></table></figure><p>停止命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew services stop mysql</span><br></pre></td></tr></table></figure><h3 id="设置密码"><a href="#设置密码" class="headerlink" title="设置密码"></a>设置密码</h3><p>首先启动mysql服务器，然后执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql_secure_installation</span><br></pre></td></tr></table></figure><p>如果出现如下内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">VALIDATE PASSWORD COMPONENT can be used to <span class="built_in">test</span> passwords</span><br><span class="line">and improve security. It checks the strength of password</span><br><span class="line">and allows the users to <span class="built_in">set</span> only those passwords <span class="built_in">which</span> are</span><br><span class="line">secure enough. Would you like to setup VALIDATE PASSWORD component?</span><br><span class="line"></span><br><span class="line">Press y|Y <span class="keyword">for</span> Yes, any other key <span class="keyword">for</span> No:</span><br></pre></td></tr></table></figure><p>表示询问你是否需要安装密码验证插件，这里我输入<strong>y</strong>允许安装了。</p><p>接下来</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">There are three levels of password validation policy:</span><br><span class="line"></span><br><span class="line">LOW    Length &gt;= 8</span><br><span class="line">MEDIUM Length &gt;= 8, numeric, mixed <span class="keyword">case</span>, and special characters</span><br><span class="line">STRONG Length &gt;= 8, numeric, mixed <span class="keyword">case</span>, special characters and dictionary                  file</span><br><span class="line"></span><br><span class="line">Please enter 0 = LOW, 1 = MEDIUM and 2 = STRONG:</span><br></pre></td></tr></table></figure><p>这里是要求制定密码强度，我这里选择是0，</p><p>接下来就是让我输入两边密码了，</p><p>因为我输入的密码比较简单，所以有了如下提示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Estimated strength of the password: 50</span><br><span class="line">Do you wish to <span class="built_in">continue</span> with the password provided?(Press y|Y <span class="keyword">for</span> Yes, any other key <span class="keyword">for</span> No) :</span><br></pre></td></tr></table></figure><p>提示说这个密码的强度不高，询问是否真的使用这类强度的密码呢？我选择使用。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Remove anonymous users? (Press y|Y <span class="keyword">for</span> Yes, any other key <span class="keyword">for</span> No) :</span><br></pre></td></tr></table></figure><p>是否移除匿名用户？肯定要移除啊。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Disallow root login remotely? (Press y|Y <span class="keyword">for</span> Yes, any other key <span class="keyword">for</span> No) :</span><br></pre></td></tr></table></figure><p>是否禁用root远程登录呢？肯定要禁用啊。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Remove <span class="built_in">test</span> database and access to it? (Press y|Y <span class="keyword">for</span> Yes, any other key <span class="keyword">for</span> No) :</span><br></pre></td></tr></table></figure><p>是否要移除test数据库(这是一个测试数据库)呢？肯定要移除。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Reload privilege tables now? (Press y|Y for Yes, any other key for No) :</span><br></pre></td></tr></table></figure><p>是否要重载权限表。嗯，要重载。</p><p>然后设置就完成了。</p><p>接下来我们就可以使用如下命令登录mysql了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -uroot -p</span><br></pre></td></tr></table></figure><h3 id="登录验证插件"><a href="#登录验证插件" class="headerlink" title="登录验证插件"></a>登录验证插件</h3><p>这里有个小问题，就是mysql的身份验证插件从之前的<code>mysql_native_password</code>更新为<code>caching_sha2_password</code>。</p><p>目前的PHP并不支持更新后的插件，所以可以参考我如下的文章使用之前的身份验证插件创建用户密码。</p><p>具体可以参考我的这一篇文章《<a href="/2018/08/22/upgrade-mysql-to-8-0/" title="数据库升级">数据库升级</a>》.</p><h2 id="组合"><a href="#组合" class="headerlink" title="组合"></a>组合</h2><p>安装完成后，其实nginx并不能直接和php进行通信。一般通信的方式有两种，一种是通过监听端口(默认9000)，一种是监听socket。这里我们使用监听端口的方式。</p><p>因为php-fpm这边已经默认是监听127.0.0.1:9000端口了，所以这里只需要修改nginx配置即可。</p><p>首先打开<code>/usr/local/etc/nginx/nginx.conf</code></p><p>修改后的配置文件如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"># server 部分修改如下</span><br><span class="line">server &#123;</span><br><span class="line">    listen       80; # 修改端口为80</span><br><span class="line">    server_name  localhost;</span><br><span class="line"></span><br><span class="line">    charset utf-8; # 设置默认字符集为utf-8</span><br><span class="line"></span><br><span class="line">    #access_log  logs&#x2F;host.access.log  main;</span><br><span class="line"></span><br><span class="line">    root   html;</span><br><span class="line">    index  index.php index.html index.htm; # 新增index.php</span><br><span class="line"></span><br><span class="line">    location ~ \.php$ &#123;</span><br><span class="line">        fastcgi_pass   127.0.0.1:9000;</span><br><span class="line">        fastcgi_index  index.php;</span><br><span class="line">        fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name; &#x2F;&#x2F; 修改&#96;&#x2F;script&#96;为&#96;$document_root&#96;，该值为root定义的路径</span><br><span class="line">        include        fastcgi_params;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后打开<code>/usr/local/var/www</code>目录，新增<code>index.php</code>文件，内容如下:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">phpinfo();</span><br></pre></td></tr></table></figure><p>使用如下命令重启nginx</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew services restart nginx</span><br></pre></td></tr></table></figure><p>最后访问<code>localhost</code>就可以看到phpinfo正确显示的网页了。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://brew.sh/" target="_blank" rel="noopener">https://brew.sh/</a></li><li><a href="https://formulae.brew.sh/formula/" target="_blank" rel="noopener">https://formulae.brew.sh/formula/</a></li><li><a href="https://mysqlserverteam.com/upgrading-to-mysql-8-0-default-authentication-plugin-considerations/" target="_blank" rel="noopener">https://mysqlserverteam.com/upgrading-to-mysql-8-0-default-authentication-plugin-considerations/</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;homebrew&quot;&gt;&lt;a href=&quot;#homebrew&quot; class=&quot;headerlink&quot; title=&quot;homebrew&quot;&gt;&lt;/a&gt;homebrew&lt;/h2&gt;&lt;p&gt;在centos上有yum，ubuntu上有apt，而mac则是brew。这个并不是内置的。需
      
    
    </summary>
    
    
      <category term="编程语言" scheme="http://www.baoguoxiao.com/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
      <category term="mac" scheme="http://www.baoguoxiao.com/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/mac/"/>
    
    
      <category term="php" scheme="http://www.baoguoxiao.com/tags/php/"/>
    
      <category term="nginx" scheme="http://www.baoguoxiao.com/tags/nginx/"/>
    
      <category term="mysql" scheme="http://www.baoguoxiao.com/tags/mysql/"/>
    
      <category term="mac" scheme="http://www.baoguoxiao.com/tags/mac/"/>
    
      <category term="web" scheme="http://www.baoguoxiao.com/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>查看本机IP</title>
    <link href="http://www.baoguoxiao.com/2018/11/15/view-local-ip/"/>
    <id>http://www.baoguoxiao.com/2018/11/15/view-local-ip/</id>
    <published>2018-11-15T03:08:12.000Z</published>
    <updated>2020-02-08T14:04:59.901Z</updated>
    
    <content type="html"><![CDATA[<p>有时候，在登录到云服务器之后，可能需要在终端查询该服务器的ip。</p><p>之前我都是用的 ip.cn ，但是感觉不行了。</p><p>现在提供一些其他的可选择项：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">$ curl ipinfo.io</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"ip"</span>: <span class="string">"60.205.205.243"</span>,</span><br><span class="line">  <span class="string">"city"</span>: <span class="string">""</span>,</span><br><span class="line">  <span class="string">"region"</span>: <span class="string">""</span>,</span><br><span class="line">  <span class="string">"country"</span>: <span class="string">"CN"</span>,</span><br><span class="line">  <span class="string">"loc"</span>: <span class="string">"34.7725,113.7270"</span>,</span><br><span class="line">  <span class="string">"org"</span>: <span class="string">"AS37963 Hangzhou Alibaba Advertising Co.,Ltd."</span></span><br><span class="line">&#125;</span><br><span class="line">$ curl cip.cc</span><br><span class="line">IP: 60.205.205.243</span><br><span class="line">地址: 中国  北京</span><br><span class="line">运营商: 阿里云/电信/联通/移动/铁通/教育网</span><br><span class="line"></span><br><span class="line">数据二: 北京市 | 阿里云BGP服务器</span><br><span class="line"></span><br><span class="line">数据三: 中国北京北京市 | 阿里云</span><br><span class="line"></span><br><span class="line">URL: http://www.cip.cc/60.205.205.243</span><br><span class="line">$ curl myip.ipip.net</span><br><span class="line">当前 IP：60.205.205.243  来自于：中国 北京 北京  阿里云/电信/联通/移动/铁通/教育网</span><br><span class="line"><span class="comment"># curl ifconfig.me</span></span><br><span class="line">60.205.205.243</span><br><span class="line">$ curl http://members.3322.org/dyndns/getip</span><br><span class="line">60.205.205.243</span><br></pre></td></tr></table></figure><p>相信还有这么多的URL。估计哪一个不行了，都能找到可替代的了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;有时候，在登录到云服务器之后，可能需要在终端查询该服务器的ip。&lt;/p&gt;
&lt;p&gt;之前我都是用的 ip.cn ，但是感觉不行了。&lt;/p&gt;
&lt;p&gt;现在提供一些其他的可选择项：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td c
      
    
    </summary>
    
    
      <category term="未分类" scheme="http://www.baoguoxiao.com/categories/%E6%9C%AA%E5%88%86%E7%B1%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>mac 登录阿里云</title>
    <link href="http://www.baoguoxiao.com/2018/11/15/mac-login-ali-cloud/"/>
    <id>http://www.baoguoxiao.com/2018/11/15/mac-login-ali-cloud/</id>
    <published>2018-11-15T03:03:51.000Z</published>
    <updated>2020-02-08T14:04:59.901Z</updated>
    
    <content type="html"><![CDATA[<p>在windows环境中，我们都是可以通过xshell实现证书登录的。</p><p>但是在mac中却没有相关的设置，那么如何使用mac进行证书登录呢。</p><p>首先，我们需要有一个私钥文件。</p><p>比如我的是aliyun.pem.</p><p>我将其存放在<code>/home/baoguoxiao/aliyun.pem</code>。</p><p>登录的命令则是如下这条:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -i /home/baoguoxiao/aliyun.pem root@ip</span><br></pre></td></tr></table></figure><p>执行该命令的时候可能会提示如下错误:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Permissions 0755 <span class="keyword">for</span> <span class="string">'/home/baoguoxiao/aliyun.pem'</span> are too open.</span><br></pre></td></tr></table></figure><p>这个表示我们给与这个文件的权限太大了，所以需要对其设置只读权限。</p><p>执行如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod 400 /home/baoguoxiao/aliyun.pem</span><br></pre></td></tr></table></figure><p>然后再次使用如上的<code>ssh</code>命令，就可以顺利的登录阿里云服务器了。</p><p>这样真的好棒。妈妈再也不用担心我的学习。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://stackoverflow.com/questions/9270734/ssh-permissions-are-too-open-error" target="_blank" rel="noopener">https://stackoverflow.com/questions/9270734/ssh-permissions-are-too-open-error</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在windows环境中，我们都是可以通过xshell实现证书登录的。&lt;/p&gt;
&lt;p&gt;但是在mac中却没有相关的设置，那么如何使用mac进行证书登录呢。&lt;/p&gt;
&lt;p&gt;首先，我们需要有一个私钥文件。&lt;/p&gt;
&lt;p&gt;比如我的是aliyun.pem.&lt;/p&gt;
&lt;p&gt;我将其存放在&lt;
      
    
    </summary>
    
    
      <category term="操作系统" scheme="http://www.baoguoxiao.com/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="mac" scheme="http://www.baoguoxiao.com/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/mac/"/>
    
    
      <category term="mac" scheme="http://www.baoguoxiao.com/tags/mac/"/>
    
      <category term="阿里云" scheme="http://www.baoguoxiao.com/tags/%E9%98%BF%E9%87%8C%E4%BA%91/"/>
    
      <category term="ssh" scheme="http://www.baoguoxiao.com/tags/ssh/"/>
    
  </entry>
  
  <entry>
    <title>javascript将html实体转回</title>
    <link href="http://www.baoguoxiao.com/2018/11/13/javascript-cover-entities-to-html/"/>
    <id>http://www.baoguoxiao.com/2018/11/13/javascript-cover-entities-to-html/</id>
    <published>2018-11-13T10:11:06.000Z</published>
    <updated>2020-02-08T14:04:59.901Z</updated>
    
    <content type="html"><![CDATA[<p>有时候我们可能需要向html中传递html代码。但是因为我们的后台框架使用了laravel。所以我们在赋值的时候就会变成:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;$username&#125;&#125;</span><br></pre></td></tr></table></figure><p>虽然我们使用自带的非转义的赋值方法：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;!! $username !!&#125;</span><br></pre></td></tr></table></figure><p>但是我的需求却是不能使用后面的这类方法。</p><p>通过谷歌，我了解到一种完美的办法，可以将转义后的代码再次转回来。</p><p>代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">htmlDecode</span>(<span class="params">input</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> e = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</span><br><span class="line">    e.innerHTML = input;</span><br><span class="line">    <span class="keyword">return</span> e.childNodes.length === <span class="number">0</span> ? <span class="string">""</span> : e.childNodes[<span class="number">0</span>].nodeValue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们只需要调用该方法就可以完美执行反转义了：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">htmlDecode(<span class="string">"&amp;lt;img src='myimage.jpg'&amp;gt;"</span>); </span><br><span class="line"><span class="comment">// returns "&lt;img src='myimage.jpg'&gt;"</span></span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://css-tricks.com/snippets/javascript/unescape-html-in-js/" target="_blank" rel="noopener">https://css-tricks.com/snippets/javascript/unescape-html-in-js/</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;有时候我们可能需要向html中传递html代码。但是因为我们的后台框架使用了laravel。所以我们在赋值的时候就会变成:&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span
      
    
    </summary>
    
    
      <category term="编程语言" scheme="http://www.baoguoxiao.com/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
      <category term="javascript" scheme="http://www.baoguoxiao.com/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/javascript/"/>
    
    
      <category term="javascript" scheme="http://www.baoguoxiao.com/tags/javascript/"/>
    
      <category term="html" scheme="http://www.baoguoxiao.com/tags/html/"/>
    
  </entry>
  
  <entry>
    <title>安卓适配</title>
    <link href="http://www.baoguoxiao.com/2018/11/13/sentry-android-sdk-adaptation/"/>
    <id>http://www.baoguoxiao.com/2018/11/13/sentry-android-sdk-adaptation/</id>
    <published>2018-11-13T09:51:58.000Z</published>
    <updated>2020-02-08T14:04:59.901Z</updated>
    
    <content type="html"><![CDATA[<p>今天下午一直在跟安卓调试sentry适配问题。发现了两个问题。现在记录如下：</p><h2 id="红米一直安装不上APP"><a href="#红米一直安装不上APP" class="headerlink" title="红米一直安装不上APP"></a>红米一直安装不上APP</h2><p>在开发的时候，发现红米一直安装不上APP。经过百度查询，发现是在开发设置中打开了<strong>启用MIUI优化</strong>设置，将其关掉，然后重启，然后接着开启<strong>USB安装</strong>，之前因为一直没网，没有注意这个，导致一些隐性的bug没有展示出来，粗心啊。</p><h2 id="安装页面没有DSN信息"><a href="#安装页面没有DSN信息" class="headerlink" title="安装页面没有DSN信息"></a>安装页面没有DSN信息</h2><p>一般在安装页面都会介绍DSN信息，但是安卓病没有提示，顿时不知道这个URL应该去哪找到了，在翻了好久之后，终于找到了位置。</p><p>路径为: Project details -&gt; Settings -&gt; Client Keys(DSN)</p><p>在这里面就可以拿到相关的DSN信息。</p><h2 id="官网提供的SDK不可用"><a href="#官网提供的SDK不可用" class="headerlink" title="官网提供的SDK不可用"></a>官网提供的SDK不可用</h2><p>这个问题就非常坑了。官网提供的SDK根本不可用，最后我们各种谷歌之后，终于发现了问题，原来该SDK已经在2013年就不维护了，必须转而使用raven-java。</p><p>现在粘贴相关代码：</p><p>Gradle</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">compile &#39;com.getsentry.raven:raven-android:8.0.1&#39; # 实测compile不可用，必须替换为 api</span><br></pre></td></tr></table></figure><p>Permissions</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.INTERNET"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.ACCESS_NETWORK_STATE"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>实例化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.getsentry.raven.android.Raven;</span><br><span class="line"></span><br><span class="line">Context ctx = <span class="keyword">this</span>.getApplicationContext();</span><br><span class="line">Raven.init(ctx, <span class="string">"YOUR-SENTRY-DSN"</span>);</span><br></pre></td></tr></table></figure><p>捕获错误</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    String json = <span class="string">"['a']"</span>;</span><br><span class="line">    JSONObject jsonObject = <span class="keyword">new</span> JSONObject(json); <span class="comment">// 示例错误</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    Sentry.capture(e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在测试过程中发现，接收到的错误信息有时候很及时，有时候就非常慢。推测可能是因为APP崩溃退出了，导致错误信息没有及时发出，所以会在下一次APP启动的时候，将相关的错误数据送出， 这样导致sentry接收到错误消息的时间较晚。</p><h2 id="参考URL"><a href="#参考URL" class="headerlink" title="参考URL"></a>参考URL</h2><ul><li><a href="https://www.rokkincat.com/blog/2017/05/01/sentry-android-deprecation" target="_blank" rel="noopener">https://www.rokkincat.com/blog/2017/05/01/sentry-android-deprecation</a></li><li><a href="https://docs.sentry.io/clients/java/modules/android/" target="_blank" rel="noopener">https://docs.sentry.io/clients/java/modules/android/</a> 这个是官方地址，但是实际上该SDK不可用。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天下午一直在跟安卓调试sentry适配问题。发现了两个问题。现在记录如下：&lt;/p&gt;
&lt;h2 id=&quot;红米一直安装不上APP&quot;&gt;&lt;a href=&quot;#红米一直安装不上APP&quot; class=&quot;headerlink&quot; title=&quot;红米一直安装不上APP&quot;&gt;&lt;/a&gt;红米一直安装不
      
    
    </summary>
    
    
      <category term="编程语言" scheme="http://www.baoguoxiao.com/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
      <category term="android" scheme="http://www.baoguoxiao.com/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/android/"/>
    
    
      <category term="android" scheme="http://www.baoguoxiao.com/tags/android/"/>
    
      <category term="sentry" scheme="http://www.baoguoxiao.com/tags/sentry/"/>
    
  </entry>
  
  <entry>
    <title>docker-compose安装</title>
    <link href="http://www.baoguoxiao.com/2018/11/11/install-docker-composer/"/>
    <id>http://www.baoguoxiao.com/2018/11/11/install-docker-composer/</id>
    <published>2018-11-11T13:49:51.000Z</published>
    <updated>2020-02-08T14:04:59.901Z</updated>
    
    <content type="html"><![CDATA[<p>在安装docker-compose之前必须先检查是否已经安装好了docker。具体安装教程可阅读 <a href="/2018/02/07/docker-study-notes-1-install/" title="docker学习笔记之一 安装">docker学习笔记之一 安装</a>。</p><p>运行此命令下载最新版本的docker-compose</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo curl -L <span class="string">"https://github.com/docker/compose/releases/download/1.23.1/docker-compose-<span class="variable">$(uname -s)</span>-<span class="variable">$(uname -m)</span>"</span> -o /usr/<span class="built_in">local</span>/bin/docker-compose</span><br></pre></td></tr></table></figure><p>可以看到我们上面下载的版本是1.23.1。这个可能很快就过期了，这个时候可以查看<a href="https://github.com/docker/compose/releases" target="_blank" rel="noopener">Releases</a>页面了解最新发布的版本，然后将最新发布的版本号替换上面命令中已知的版本号进行下载。</p><p>接下来我们对其设置执行权限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chmod +x /usr/<span class="built_in">local</span>/bin/docker-compose</span><br></pre></td></tr></table></figure><p>好了，这样就安装完成了。是不是非常简单。</p><p>最后我们检查看版本。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ docker-compose --version</span><br><span class="line">docker-compose version 1.23.1, build b02f1306</span><br></pre></td></tr></table></figure><p>end.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在安装docker-compose之前必须先检查是否已经安装好了docker。具体安装教程可阅读 &lt;a href=&quot;/2018/02/07/docker-study-notes-1-install/&quot; title=&quot;docker学习笔记之一 安装&quot;&gt;docker学习笔记之一
      
    
    </summary>
    
    
      <category term="工具" scheme="http://www.baoguoxiao.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="docker" scheme="http://www.baoguoxiao.com/categories/%E5%B7%A5%E5%85%B7/docker/"/>
    
    
      <category term="docker" scheme="http://www.baoguoxiao.com/tags/docker/"/>
    
      <category term="docker-compose" scheme="http://www.baoguoxiao.com/tags/docker-compose/"/>
    
  </entry>
  
  <entry>
    <title>ubuntu安装lrzsz</title>
    <link href="http://www.baoguoxiao.com/2018/11/11/ubuntu-apt-install-lrzsz/"/>
    <id>http://www.baoguoxiao.com/2018/11/11/ubuntu-apt-install-lrzsz/</id>
    <published>2018-11-11T13:29:08.000Z</published>
    <updated>2020-02-08T14:04:59.901Z</updated>
    
    <content type="html"><![CDATA[<p>lrzsz命令是非常好用的一个命令。</p><p>这个命令可以支持我们在xshell中进行文件的上传和下载操作。</p><p>但是默认执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt install lrzsz </span><br><span class="line">Reading package lists... Done</span><br><span class="line">Building dependency tree       </span><br><span class="line">Reading state information... Done</span><br><span class="line">E: Unable to locate package lrzsz</span><br></pre></td></tr></table></figure><p>出现了找不到包的错误。</p><p>发现解决的办法很简单。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo add-apt-repository universe</span><br></pre></td></tr></table></figure><p>新增了这个源之后，我们重新执行安装命令之后就可以了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install lrzsz</span><br></pre></td></tr></table></figure><p>end.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;lrzsz命令是非常好用的一个命令。&lt;/p&gt;
&lt;p&gt;这个命令可以支持我们在xshell中进行文件的上传和下载操作。&lt;/p&gt;
&lt;p&gt;但是默认执行&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;
      
    
    </summary>
    
    
      <category term="操作系统" scheme="http://www.baoguoxiao.com/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="ubuntu" scheme="http://www.baoguoxiao.com/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/ubuntu/"/>
    
    
      <category term="ubuntu" scheme="http://www.baoguoxiao.com/tags/ubuntu/"/>
    
      <category term="linux" scheme="http://www.baoguoxiao.com/tags/linux/"/>
    
      <category term="lrzsz" scheme="http://www.baoguoxiao.com/tags/lrzsz/"/>
    
  </entry>
  
  <entry>
    <title>sentry笔记整理</title>
    <link href="http://www.baoguoxiao.com/2018/11/07/sentry-note-1/"/>
    <id>http://www.baoguoxiao.com/2018/11/07/sentry-note-1/</id>
    <published>2018-11-07T09:37:21.000Z</published>
    <updated>2020-02-08T14:04:59.901Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>开源错误跟踪，帮助开发人员实时监控和修复崩溃。不断重复。提高效率。改善用户体验。</p><h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><ul><li>相同错误合并</li><li>定制规则进行邮件通知</li><li>支持导入sourcemap自动解析和还原代码</li><li>多项目，多用户</li><li>友好的Web界面</li><li>支持主流的语言接口</li><li>权限管理</li><li>敏感信息过滤</li><li>受影响用户统计</li><li>WEB可视化设置，功能强大</li><li>…</li></ul><h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><p>使用docker-compose命令一键进行部署。减少部署的错误率。</p><p>具体部署程序可查看<a href="https://github.com/getsentry/onpremise" target="_blank" rel="noopener">getsentry/onpremise</a></p><p>使用nginx接受请求并对其进行转发。并使用了<code>ngx_http_realip_module</code>模块转发真实请求IP。</p><h2 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h2><p>sentry分为客户端和服务端。客户端嵌入到App中，当应用发生异常的情况时，就会向服务器端发送异常通知，服务器端则将信息记录到数据库汇总，并提供web方式，方便对异常进行查看和分析，避免需要登录服务器后台查看生硬的log文件。</p><h2 id="收集日志"><a href="#收集日志" class="headerlink" title="收集日志"></a>收集日志</h2><ul><li>客户端运行错误日志<ul><li>Android</li><li>IOS</li><li>HTML</li></ul></li><li>服务器端项目运行错误日志<ul><li>PHP</li></ul></li><li>Web环境错误日志<ul><li>PHP-fPM错误日志</li><li>Nginx错误日志</li></ul></li></ul><p>目前的日志捕获，都有相应的SDK，非常方便，不同的是客户端因为有代码混淆，所以，需要在sentry中上传相应sourcemap文件。</p><p>目前的PHP-FPM和Nginx错误日志没有现成的代码，这里需要一些时间进行编写代码处理相关错误。</p><h2 id="适配"><a href="#适配" class="headerlink" title="适配"></a>适配</h2><p>目前sentry有很多的SDK包。目前已经覆盖咱们产品线的有：</p><ul><li>Android</li><li>Swift</li><li>Objective-C</li><li>JavaScript</li><li>PHP</li><li>Laravel</li><li>…</li></ul><h2 id="组织架构"><a href="#组织架构" class="headerlink" title="组织架构"></a>组织架构</h2><p><strong>角色</strong></p><table><thead><tr><th align="center">行为[Action]</th><th align="center">会员[Member]</th><th align="center">管理员[Admin]</th><th align="center">经理[Manager]</th><th align="center">所有者[Owner ]</th></tr></thead><tbody><tr><td align="center">Can view and act on issues, such as assigning/resolving/etc.</td><td align="center">✔️</td><td align="center">✔️</td><td align="center">✔️</td><td align="center">✔️</td></tr><tr><td align="center">可以加入和离开团队[Can join and leave teams]</td><td align="center">✔️</td><td align="center">✔️</td><td align="center">✔️</td><td align="center">✔️</td></tr><tr><td align="center">可以修改项目设置[Can change Project Settings]</td><td align="center"></td><td align="center">✔️</td><td align="center">✔️</td><td align="center">✔️</td></tr><tr><td align="center">可以添加/删除项目[Can add/remove projects]</td><td align="center"></td><td align="center">✔️</td><td align="center">✔️</td><td align="center">✔️</td></tr><tr><td align="center">可以编辑全局集成[Can edit Global Integrations]</td><td align="center"></td><td align="center"></td><td align="center">✔️</td><td align="center">✔️</td></tr><tr><td align="center">可以添加/删除/修改成员[Can add/remove/change members]</td><td align="center"></td><td align="center"></td><td align="center">✔️</td><td align="center">✔️</td></tr><tr><td align="center">可以添加/删除团队[Can add/remove teams]</td><td align="center"></td><td align="center"></td><td align="center">✔️</td><td align="center">✔️</td></tr><tr><td align="center">可以添加仓库[Can add Repositories]</td><td align="center"></td><td align="center"></td><td align="center">✔️</td><td align="center">✔️</td></tr><tr><td align="center">可以改变组织设置[Can change Organization Settings]</td><td align="center"></td><td align="center"></td><td align="center">✔️</td><td align="center">✔️</td></tr><tr><td align="center">可以移除一个组织[Can remove an Organization]</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center">✔️</td></tr></tbody></table><p><strong><em>归属关系</em></strong></p><p>一个组织对应多个团队<br>一个团队对应多个项目<br>一个团队对应多个会员<br>一个会员属于多个团队<br>一个项目属于一个团队</p><h2 id="邮件通知"><a href="#邮件通知" class="headerlink" title="邮件通知"></a>邮件通知</h2><p>默认情况下，一旦异常发生，5分钟内就会有一封邮件发送到你的邮箱。包含了异常的大致描述。</p><p>目前的默认规则是当出现一个新的规则时候，30分钟内发送一次邮件通知。</p><p>对于发送邮件的规则可以进行新增/编辑/移除。</p><h2 id="限制"><a href="#限制" class="headerlink" title="限制"></a>限制</h2><ul><li>不能作为日志的替代品。<br>sentry主要是为让我们专注于系统和程序的异常信息，提高排查效率，日志事件的量达到一个限制值的时候可能还会丢弃一些内容。官方也提倡正确设置sentry接收的日志level的等级时，也能继续旧的日志备份。</li><li>不是排查的万能工具<br>sentry是带有问题聚合功能的分析工具，所以如果样本提供的内容不全面。日志记录的质量不高的情况，对于错误的快速排查，可能没有实质性的帮助。</li><li>不能作为传统监控的替代品<br>与传统监控系统相比，sentry更依赖发出的日志报告，而另外一些隐藏的逻辑问题或者业务问题可能不会得到反馈的。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;开源错误跟踪，帮助开发人员实时监控和修复崩溃。不断重复。提高效率。改善用户体验。&lt;/p&gt;
&lt;h2 id=&quot;特性&quot;&gt;&lt;a href=&quot;#特性&quot;
      
    
    </summary>
    
    
      <category term="工具" scheme="http://www.baoguoxiao.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="sentry" scheme="http://www.baoguoxiao.com/categories/%E5%B7%A5%E5%85%B7/sentry/"/>
    
    
      <category term="sentry" scheme="http://www.baoguoxiao.com/tags/sentry/"/>
    
  </entry>
  
  <entry>
    <title>sentry配置邮件</title>
    <link href="http://www.baoguoxiao.com/2018/10/30/sentry-configuring-mail/"/>
    <id>http://www.baoguoxiao.com/2018/10/30/sentry-configuring-mail/</id>
    <published>2018-10-30T01:57:20.000Z</published>
    <updated>2020-02-08T14:04:59.901Z</updated>
    
    <content type="html"><![CDATA[<p>sentry一个最大的好处就是可以使用邮件通知功能，如果没有邮件通知，那么我们自己上去看的话就非常麻烦了。</p><p>进行邮件推送需要我们提供邮件服务器。这里的话，我就用的是腾讯企业邮箱。</p><p>好了，下面说具体配置。</p><p>首先接上一篇文章 <a href="/2018/10/29/sentry-install/" title="安装sentry">安装sentry</a>，我们将代码拉取到的目录是<code>/data/sentry</code>。</p><p>接下来我们就要里面这个文件夹里面的<code>docker-compose.yml</code>文件。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">x-defaults:</span> <span class="meta">&amp;defaults</span></span><br><span class="line">  <span class="attr">restart:</span> <span class="string">unless-stopped</span></span><br><span class="line">  <span class="attr">build:</span> <span class="string">.</span></span><br><span class="line">  <span class="attr">depends_on:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">redis</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">postgres</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">memcached</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">smtp</span></span><br><span class="line">  <span class="attr">env_file:</span> <span class="string">.env</span></span><br><span class="line">  <span class="attr">environment:</span></span><br><span class="line">    <span class="attr">SENTRY_MEMCACHED_HOST:</span> <span class="string">memcached</span></span><br><span class="line">    <span class="attr">SENTRY_REDIS_HOST:</span> <span class="string">redis</span></span><br><span class="line">    <span class="attr">SENTRY_POSTGRES_HOST:</span> <span class="string">postgres</span></span><br><span class="line">    <span class="comment"># 从这里开始</span></span><br><span class="line">    <span class="attr">SENTRY_EMAIL_HOST:</span> <span class="string">smtp.exmail.qq.com</span></span><br><span class="line">    <span class="attr">SENTRY_EMAIL_USER:</span> <span class="string">example@mail.com</span></span><br><span class="line">    <span class="attr">SENTRY_SERVER_EMAIL:</span> <span class="string">example@mail.com</span></span><br><span class="line">    <span class="attr">SENTRY_EMAIL_PASSWORD:</span> <span class="string">password</span></span><br><span class="line">    <span class="attr">SENTRY_EMAIL_USE_TLS:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">SENTRY_EMAIL_PORT:</span> <span class="number">587</span></span><br><span class="line">    <span class="comment"># 这里结束</span></span><br><span class="line">  <span class="attr">volumes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">sentry-data:/var/lib/sentry/files</span></span><br></pre></td></tr></table></figure><p>这里介绍一下每个配置项的作用：</p><table><thead><tr><th align="center">配置项</th><th align="center">作用</th><th align="center">腾讯企业邮</th></tr></thead><tbody><tr><td align="center">SENTRY_EMAIL_HOST</td><td align="center">SMTP服务器地址</td><td align="center">smtp.exmail.qq.com</td></tr><tr><td align="center">SENTRY_EMAIL_USER</td><td align="center">登录的邮箱账号</td><td align="center"><a href="mailto:example@mail.com">example@mail.com</a></td></tr><tr><td align="center">SENTRY_EMAIL_PASSWORD</td><td align="center">登录的邮箱密码</td><td align="center">password</td></tr><tr><td align="center">SENTRY_EMAIL_PORT</td><td align="center">登录的端口</td><td align="center">587</td></tr><tr><td align="center">SENTRY_EMAIL_USE_TLS</td><td align="center">是否使用ssl连接</td><td align="center">true</td></tr><tr><td align="center">SENTRY_SERVER_EMAIL</td><td align="center">发送的账户，跟<strong>SENTRY_EMAIL_USER</strong>相同</td><td align="center"><a href="mailto:example@mail.com">example@mail.com</a></td></tr></tbody></table><p>配置完成之后，需要重建服务。具体可以执行以下命令:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker-compose down</span><br><span class="line">docker-composer up -d</span><br></pre></td></tr></table></figure><p>然后稍等一分钟就可以正常访问web页面了。</p><p>现在来测试一下。</p><p>进入页面，在左上角的你的昵称位置单击，选择Admin。</p><p>然后在左侧选择<strong>Mail</strong>，然后在最下面有一个测试设置。点击“向<a href="mailto:example@mail.com">example@mail.com</a>发送一封测试邮件”。如果收到的话，那么说明就配置成功了。</p><p>在配置问题中，如果有什么问题，可以过来跟我留言。</p><p>毕竟这个邮件通知我折腾了一下午才搞定。</p><p>哈哈</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;sentry一个最大的好处就是可以使用邮件通知功能，如果没有邮件通知，那么我们自己上去看的话就非常麻烦了。&lt;/p&gt;
&lt;p&gt;进行邮件推送需要我们提供邮件服务器。这里的话，我就用的是腾讯企业邮箱。&lt;/p&gt;
&lt;p&gt;好了，下面说具体配置。&lt;/p&gt;
&lt;p&gt;首先接上一篇文章 &lt;a hr
      
    
    </summary>
    
    
      <category term="工具" scheme="http://www.baoguoxiao.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="sentry" scheme="http://www.baoguoxiao.com/categories/%E5%B7%A5%E5%85%B7/sentry/"/>
    
    
      <category term="sentry" scheme="http://www.baoguoxiao.com/tags/sentry/"/>
    
      <category term="email" scheme="http://www.baoguoxiao.com/tags/email/"/>
    
  </entry>
  
  <entry>
    <title>安装sentry</title>
    <link href="http://www.baoguoxiao.com/2018/10/29/sentry-install/"/>
    <id>http://www.baoguoxiao.com/2018/10/29/sentry-install/</id>
    <published>2018-10-29T10:34:14.000Z</published>
    <updated>2020-02-08T14:04:59.901Z</updated>
    
    <content type="html"><![CDATA[<p>最近公司内部需要新增一个日志系统。目前可选择的就是sentry和阿里云日志系统。我通过两个对比之后，感觉sentry日志更加好用。所以在这里记录一下相关的笔记。首先这一篇就是安装系列了。</p><h2 id="前置条件"><a href="#前置条件" class="headerlink" title="前置条件"></a>前置条件</h2><ul><li>docker </li><li>docker-compose</li><li>git</li></ul><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>接下来的安装命令就非常简单了。</p><p>首先我们先创建目录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir /data</span><br></pre></td></tr></table></figure><p>然后拉取命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/getsentry/onpremise sentry</span><br></pre></td></tr></table></figure><p>然后进入目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> sentry</span><br></pre></td></tr></table></figure><p>首先我们修改一下映射端口。因为默认绑定端口是9000，因为我这台电脑启动了php-fpm服务绑定了9000端口，所以我这里需要将9000改成10000。具体相关配置如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># docker-compose.yml</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">web:</span></span><br><span class="line">    <span class="string">&lt;&lt;:</span> <span class="meta">*defaults</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">'10000:9000'</span> <span class="comment"># 修改位置</span></span><br></pre></td></tr></table></figure><p>好了，接下来就是创建volumn。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker volume create --name=sentry-data &amp;&amp; docker volume create --name=sentry-postgres</span><br></pre></td></tr></table></figure><p>生成配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp -n  .env.example .env</span><br></pre></td></tr></table></figure><p>创建服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose build</span><br></pre></td></tr></table></figure><p>生成秘钥</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose run --rm web config generate-secret-key</span><br></pre></td></tr></table></figure><p>将生成的秘钥添加到<code>.env</code>中的<code>SENTRY_SECRET_KEY</code>项。</p><p>构建数据库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose run --rm web upgrade</span><br></pre></td></tr></table></figure><p>启动所有服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure><p>好了，这样sentry就安装完成了。</p><h2 id="Nginx转发"><a href="#Nginx转发" class="headerlink" title="Nginx转发"></a>Nginx转发</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name abc.example.com;</span><br><span class="line"></span><br><span class="line">    location &#x2F; &#123;</span><br><span class="line">          proxy_set_header X-Real-IP  $remote_addr;</span><br><span class="line">          proxy_set_header Host-Real-IP  $http_host;</span><br><span class="line">          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">          proxy_set_header X-Real-Pcol http;</span><br><span class="line">          proxy_pass http:&#x2F;&#x2F;localhost:10000;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样我们就可以使用绑定的域名进行访问了。</p><h2 id="端口安全"><a href="#端口安全" class="headerlink" title="端口安全"></a>端口安全</h2><p>使用netstat命令查询端口状态：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># netstat -ntlp | grep 10000</span></span><br><span class="line">tcp6       0      0 :::10000                :::*                    LISTEN      22354/docker-proxy</span><br></pre></td></tr></table></figure><p>发现这个并没有绑定127.0.0.1。这里我并没有研究好如何绑定127.0.0.1。这里可以通过防火墙进行端口控制。比如阿里云的入网端口管理，或者centos的firewalld命令都可以进行控制。具体就不展开了。</p><p>PS：明天具体写如何配置邮件发送。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近公司内部需要新增一个日志系统。目前可选择的就是sentry和阿里云日志系统。我通过两个对比之后，感觉sentry日志更加好用。所以在这里记录一下相关的笔记。首先这一篇就是安装系列了。&lt;/p&gt;
&lt;h2 id=&quot;前置条件&quot;&gt;&lt;a href=&quot;#前置条件&quot; class=&quot;he
      
    
    </summary>
    
    
      <category term="工具" scheme="http://www.baoguoxiao.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="sentry" scheme="http://www.baoguoxiao.com/categories/%E5%B7%A5%E5%85%B7/sentry/"/>
    
    
      <category term="docker" scheme="http://www.baoguoxiao.com/tags/docker/"/>
    
      <category term="docker-compose" scheme="http://www.baoguoxiao.com/tags/docker-compose/"/>
    
      <category term="sentry" scheme="http://www.baoguoxiao.com/tags/sentry/"/>
    
  </entry>
  
</feed>
